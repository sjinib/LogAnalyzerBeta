/*
* The Log Analyzer used for TAC troubleshooting.
* The GUI interface was built with NetBeans Swing feature
*/
package com.ib.analyzerGui;

import com.ib.manager.*;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import org.apache.commons.io.FileUtils;
import java.util.HashMap;
import com.ib.parser.Choices;
import com.ib.reader.LogReader;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.util.List;
import javax.swing.GroupLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.SwingWorker;
import javax.swing.text.*;

/**
 *
 * @author sitengjin
 */
public class AnalyzerGUI extends javax.swing.JFrame {
    private LogManager_server serverManager = new LogManager_server();
    private LogManager_local localManager = new LogManager_local();
    
    // Server side confirguation status
    private File diagnosticFile_server;
    private boolean isDownloaded_server = false;
    private boolean isExtracted_server = false; //determine if to use extracted log or manual selected log
    
    private boolean isTwsLogAdded_server = false;
    private boolean isIbgLogAdded_server = false;
    private boolean isTwsSettingsAdded_server = false;
    private boolean isIbgSettingsAdded_server = false;
    private boolean isTradeFileAdded_server = false;
    
    private boolean logReady_server = false;
    private boolean settingsReady_server = false;
    private boolean trdReady_server = false;
    private boolean screenshotReady_server = false;
    
    // Local side configuration status
    private File diagnosticFile_local;
    private boolean isExtracted_local = false; //determine if to use extracted log or manual selected log
    
    private boolean isTwsLogAdded_local = false;
    private boolean isIbgLogAdded_local = false;
    private boolean isTwsSettingsAdded_local = false;
    private boolean isIbgSettingsAdded_local = false;
    private boolean isTradeFileAdded_local = false;
    
    // This is shared by both server and local since there is only one combo box for screenshot
    private boolean isScreenshotAdded = false;
    
    private boolean logReady_local = false;
    private boolean settingsReady_local = false;
    private boolean trdReady_local = false;
    private boolean screenshotReady_local = false;
    
    private HashMap<Integer, javax.swing.JTextPane> textPaneList = new HashMap<Integer, javax.swing.JTextPane>();
    
    /**
     * Creates new form demoFrame
     */
    public AnalyzerGUI() {
        initComponents(); // Default initializer called by NetBeans
        customInitTextPaneComponents(); // Initializing contents for display panes
        customInitComponents(); 
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        twsIbgGroup2 = new javax.swing.ButtonGroup();
        importMethodGroup = new javax.swing.ButtonGroup();
        twsIbgGroup1 = new javax.swing.ButtonGroup();
        directoryChooser = new javax.swing.JFileChooser();
        MainPane = new javax.swing.JTabbedPane();
        configurePanel = new javax.swing.JPanel();
        configurePane = new javax.swing.JPanel();
        downloadDiagnosticPane = new javax.swing.JPanel();
        userDiagnosticsComboBox = new javax.swing.JComboBox<>();
        ibgRadio1 = new javax.swing.JRadioButton();
        logComboBox1 = new javax.swing.JComboBox<>();
        twsIbgLogLabel1 = new javax.swing.JLabel();
        extractBtn1 = new javax.swing.JButton();
        tradeComboBox1 = new javax.swing.JComboBox<>();
        tradeLabel1 = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        settingsComboBox1 = new javax.swing.JComboBox<>();
        chooseDiagnosticFileLabel = new javax.swing.JLabel();
        loadUserBtn = new javax.swing.JButton();
        twsRadio1 = new javax.swing.JRadioButton();
        settingsLabel1 = new javax.swing.JLabel();
        browseExtract1 = new javax.swing.JButton();
        extractProgressBar1 = new javax.swing.JProgressBar();
        extractLabel1 = new javax.swing.JLabel();
        extractDirectory1 = new javax.swing.JTextField();
        usernameText = new javax.swing.JTextField();
        loadDirectory1 = new javax.swing.JTextField();
        downloadBtn = new javax.swing.JButton();
        browseZip1 = new javax.swing.JButton();
        currentLoadedDiagnosticFileLabel = new javax.swing.JLabel();
        resetBtn = new javax.swing.JButton();
        loadingLabel = new javax.swing.JLabel();
        importDiagnosticPane = new javax.swing.JPanel();
        logComboBox2 = new javax.swing.JComboBox<>();
        importLabel = new javax.swing.JLabel();
        extractDirectory2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        extractLabel2 = new javax.swing.JLabel();
        browseExtract2 = new javax.swing.JButton();
        settingsComboBox2 = new javax.swing.JComboBox<>();
        loadDirectory2 = new javax.swing.JTextField();
        twsRadio2 = new javax.swing.JRadioButton();
        extractProgressBar2 = new javax.swing.JProgressBar();
        tradeLabel2 = new javax.swing.JLabel();
        tradeComboBox2 = new javax.swing.JComboBox<>();
        browseZip2 = new javax.swing.JButton();
        ibgRadio2 = new javax.swing.JRadioButton();
        extractBtn2 = new javax.swing.JButton();
        settingsLabel2 = new javax.swing.JLabel();
        twsIbgLogLabel2 = new javax.swing.JLabel();
        manualImportPane = new javax.swing.JPanel();
        browseSettingsManual = new javax.swing.JButton();
        settingsDirectoryManual = new javax.swing.JTextField();
        logDirectoryManual = new javax.swing.JTextField();
        manualSettingsLabel = new javax.swing.JLabel();
        browseLogManual = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        statusPanel = new javax.swing.JPanel();
        useImportLocalBtn = new javax.swing.JRadioButton();
        useManualFileBtn = new javax.swing.JRadioButton();
        statusLabel = new javax.swing.JLabel();
        logFileStatus = new javax.swing.JLabel();
        settingsFileStatus = new javax.swing.JLabel();
        analyzeBtn = new javax.swing.JButton();
        tradeFileStatus = new javax.swing.JLabel();
        screenshotStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        useImportServerBtn = new javax.swing.JRadioButton();
        twsLogFilterPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        analyzeAllBtn = new javax.swing.JButton();
        analyzeEnvBtn = new javax.swing.JButton();
        analyzeLoginSeqBtn = new javax.swing.JButton();
        analyzeSysResBtn = new javax.swing.JButton();
        analyzeMktDataBtn = new javax.swing.JButton();
        analyzeConnBtn = new javax.swing.JButton();
        analyzeHtbpBtn = new javax.swing.JButton();
        analyzeAPIBtn = new javax.swing.JButton();
        analyzeOrdTrdBtn = new javax.swing.JButton();
        clearAllBtn = new javax.swing.JButton();
        autoClsCheck = new javax.swing.JCheckBox();
        deepAnalysisCheck = new javax.swing.JCheckBox();
        includeXmlCheck = new javax.swing.JCheckBox();
        includeTrdFileCheck = new javax.swing.JCheckBox();
        openLogFileBtn = new javax.swing.JButton();
        regExText = new javax.swing.JTextField();
        matchCaseCheck = new javax.swing.JCheckBox();
        regExSearchBtn = new javax.swing.JButton();
        screenshotComboBox = new javax.swing.JComboBox<>();
        openScreenshotBtn = new javax.swing.JButton();
        textMainPane = new javax.swing.JPanel();

        directoryChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Log Analyzer");
        setName("mainPanel"); // NOI18N
        setSize(new java.awt.Dimension(0, 0));

        MainPane.setName(""); // NOI18N
        MainPane.setPreferredSize(new java.awt.Dimension(484, 484));

        configurePanel.setName(""); // NOI18N
        configurePanel.setPreferredSize(new java.awt.Dimension(1200, 900));

        configurePane.setBorder(javax.swing.BorderFactory.createTitledBorder("Log File Configuration"));
        configurePane.setPreferredSize(new java.awt.Dimension(827, 800));

        downloadDiagnosticPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Download Diagnostic File From Server"));

        userDiagnosticsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userDiagnosticsComboBoxActionPerformed(evt);
            }
        });

        twsIbgGroup1.add(ibgRadio1);
        ibgRadio1.setText("IB Gateway");
        ibgRadio1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ibgRadio1ActionPerformed(evt);
            }
        });

        logComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logComboBox1ActionPerformed(evt);
            }
        });

        twsIbgLogLabel1.setText("TWS/IB Gateway log:");

        extractBtn1.setText("Extract");
        extractBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractBtn1ActionPerformed(evt);
            }
        });

        tradeComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tradeComboBox1ActionPerformed(evt);
            }
        });

        tradeLabel1.setText("Trade File:");

        usernameLabel.setText("Username:");

        settingsComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsComboBox1ActionPerformed(evt);
            }
        });

        chooseDiagnosticFileLabel.setText("Choose diagnostic file:");

        loadUserBtn.setText("Load");
        loadUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadUserBtnActionPerformed(evt);
            }
        });

        twsIbgGroup1.add(twsRadio1);
        twsRadio1.setText("TWS");
        twsRadio1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twsRadio1ActionPerformed(evt);
            }
        });

        settingsLabel1.setText("Settings File:");

        browseExtract1.setText("Browse");
        browseExtract1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseExtract1ActionPerformed(evt);
            }
        });

        extractProgressBar1.setForeground(new java.awt.Color(153, 153, 153));
        extractProgressBar1.setPreferredSize(new java.awt.Dimension(150, 20));
        extractProgressBar1.setStringPainted(true);

        extractLabel1.setText("Extraction Progress:");

        extractDirectory1.setEditable(false);
        extractDirectory1.setText(System.getProperty("user.home").toString() + "\\Temp_ext");
        extractDirectory1.setToolTipText("Select the directory where you want the diagnostic file to be extracted.");
        extractDirectory1.setMaximumSize(new java.awt.Dimension(300, 20));
        extractDirectory1.setPreferredSize(new java.awt.Dimension(100, 28));

        usernameText.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        usernameText.setText("Enter Username...");
        usernameText.setToolTipText("The username for searching from Error Reports");
        usernameText.setMaximumSize(new java.awt.Dimension(300, 20));
        usernameText.setPreferredSize(new java.awt.Dimension(100, 28));
        usernameText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usernameTextMouseClicked(evt);
            }
        });
        usernameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameTextKeyPressed(evt);
            }
        });

        loadDirectory1.setEditable(false);
        loadDirectory1.setText(System.getProperty("user.home").toString() + "\\Temp");
        loadDirectory1.setToolTipText("Select the directory where the diagnostic file will be downloaded to.");
        loadDirectory1.setMaximumSize(new java.awt.Dimension(300, 20));
        loadDirectory1.setPreferredSize(new java.awt.Dimension(100, 28));

        downloadBtn.setText("Download");
        downloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadBtnActionPerformed(evt);
            }
        });

        browseZip1.setText("Browse");
        browseZip1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseZip1ActionPerformed(evt);
            }
        });

        currentLoadedDiagnosticFileLabel.setText("Current loaded file: ");

        resetBtn.setText("Reset");
        resetBtn.setToolTipText("Click to rest application");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        loadingLabel.setText("Loading...");

        javax.swing.GroupLayout downloadDiagnosticPaneLayout = new javax.swing.GroupLayout(downloadDiagnosticPane);
        downloadDiagnosticPane.setLayout(downloadDiagnosticPaneLayout);
        downloadDiagnosticPaneLayout.setHorizontalGroup(
            downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downloadDiagnosticPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(downloadDiagnosticPaneLayout.createSequentialGroup()
                        .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(downloadDiagnosticPaneLayout.createSequentialGroup()
                                .addComponent(chooseDiagnosticFileLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userDiagnosticsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(downloadDiagnosticPaneLayout.createSequentialGroup()
                                .addComponent(loadDirectory1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseZip1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(downloadBtn))
                            .addGroup(downloadDiagnosticPaneLayout.createSequentialGroup()
                                .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, downloadDiagnosticPaneLayout.createSequentialGroup()
                                        .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(twsIbgLogLabel1)
                                            .addComponent(logComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(104, 104, 104)
                                        .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(settingsLabel1)
                                            .addComponent(settingsComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(85, 85, 85)
                                        .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tradeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tradeLabel1)))
                                    .addGroup(downloadDiagnosticPaneLayout.createSequentialGroup()
                                        .addComponent(extractDirectory1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(browseExtract1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(extractBtn1))
                            .addGroup(downloadDiagnosticPaneLayout.createSequentialGroup()
                                .addComponent(extractProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(twsRadio1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ibgRadio1))
                            .addComponent(extractLabel1)
                            .addComponent(currentLoadedDiagnosticFileLabel))
                        .addGap(0, 271, Short.MAX_VALUE))
                    .addGroup(downloadDiagnosticPaneLayout.createSequentialGroup()
                        .addComponent(usernameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadUserBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadingLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetBtn)))
                .addContainerGap())
        );

        downloadDiagnosticPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {browseExtract1, extractBtn1, loadUserBtn});

        downloadDiagnosticPaneLayout.setVerticalGroup(
            downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downloadDiagnosticPaneLayout.createSequentialGroup()
                .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(downloadDiagnosticPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameLabel)
                            .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loadUserBtn)
                            .addComponent(loadingLabel)))
                    .addComponent(resetBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseDiagnosticFileLabel)
                    .addComponent(userDiagnosticsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadDirectory1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(downloadBtn)
                    .addComponent(browseZip1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentLoadedDiagnosticFileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseExtract1)
                    .addComponent(extractBtn1)
                    .addComponent(extractDirectory1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extractLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(extractProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(twsRadio1)
                        .addComponent(ibgRadio1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(twsIbgLogLabel1)
                    .addComponent(settingsLabel1)
                    .addComponent(tradeLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(downloadDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingsComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tradeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        importDiagnosticPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Import local diagnostic zip file"));

        logComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logComboBox2ActionPerformed(evt);
            }
        });

        importLabel.setText("Diagnostic zip file location:");

        extractDirectory2.setEditable(false);
        extractDirectory2.setText(System.getProperty("user.home").toString() + "\\Temp_ext");
        extractDirectory2.setToolTipText("Select the directory where you want to extract the .zip file");
        extractDirectory2.setMaximumSize(new java.awt.Dimension(300, 20));
        extractDirectory2.setPreferredSize(new java.awt.Dimension(100, 28));

        jLabel3.setText("Extract zip file to location:");

        extractLabel2.setText("Extraction Progress:");

        browseExtract2.setText("Browse");
        browseExtract2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseExtract2ActionPerformed(evt);
            }
        });

        settingsComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsComboBox2ActionPerformed(evt);
            }
        });

        loadDirectory2.setEditable(false);
        loadDirectory2.setText(System.getProperty("user.home").toString() + "\\Temp");
        loadDirectory2.setToolTipText("Select the uploaded diagnostic .zip file, or directly type in its path. (To manually select a single log file, please use \"Manually select TWS/IB Gateway log file\")");
        loadDirectory2.setMaximumSize(new java.awt.Dimension(300, 20));
        loadDirectory2.setPreferredSize(new java.awt.Dimension(100, 28));

        twsIbgGroup2.add(twsRadio2);
        twsRadio2.setText("TWS");
        twsRadio2.setToolTipText("Select to analyze TWS log file");
        twsRadio2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twsRadio2ActionPerformed(evt);
            }
        });

        extractProgressBar2.setForeground(new java.awt.Color(153, 153, 153));
        extractProgressBar2.setPreferredSize(new java.awt.Dimension(150, 20));
        extractProgressBar2.setStringPainted(true);

        tradeLabel2.setText("Trade File:");

        tradeComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tradeComboBox2ActionPerformed(evt);
            }
        });

        browseZip2.setText("Browse");
        browseZip2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseZip2ActionPerformed(evt);
            }
        });

        twsIbgGroup2.add(ibgRadio2);
        ibgRadio2.setText("IB Gateway");
        ibgRadio2.setToolTipText("Select to analyze IB Gateway log file");
        ibgRadio2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ibgRadio2ActionPerformed(evt);
            }
        });

        extractBtn2.setText("Extract");
        extractBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractBtn2ActionPerformed(evt);
            }
        });

        settingsLabel2.setText("Settings File:");

        twsIbgLogLabel2.setText("TWS/IB Gateway log:");

        javax.swing.GroupLayout importDiagnosticPaneLayout = new javax.swing.GroupLayout(importDiagnosticPane);
        importDiagnosticPane.setLayout(importDiagnosticPaneLayout);
        importDiagnosticPaneLayout.setHorizontalGroup(
            importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(importDiagnosticPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(importDiagnosticPaneLayout.createSequentialGroup()
                        .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loadDirectory2, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(extractDirectory2, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(importDiagnosticPaneLayout.createSequentialGroup()
                                .addComponent(browseExtract2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(extractBtn2))
                            .addComponent(browseZip2)))
                    .addGroup(importDiagnosticPaneLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(importDiagnosticPaneLayout.createSequentialGroup()
                                .addComponent(extractProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(twsRadio2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ibgRadio2))
                            .addComponent(extractLabel2)
                            .addComponent(importLabel)
                            .addGroup(importDiagnosticPaneLayout.createSequentialGroup()
                                .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(twsIbgLogLabel2)
                                    .addComponent(logComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(100, 100, 100)
                                .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(settingsLabel2)
                                    .addComponent(settingsComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(85, 85, 85)
                                .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tradeComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tradeLabel2))))))
                .addContainerGap(293, Short.MAX_VALUE))
        );

        importDiagnosticPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {extractDirectory2, loadDirectory2});

        importDiagnosticPaneLayout.setVerticalGroup(
            importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(importDiagnosticPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(importLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadDirectory2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseZip2))
                .addGap(6, 6, 6)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(extractDirectory2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseExtract2)
                    .addComponent(extractBtn2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extractLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(extractProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(twsRadio2)
                        .addComponent(ibgRadio2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(twsIbgLogLabel2)
                    .addComponent(settingsLabel2)
                    .addComponent(tradeLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(importDiagnosticPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingsComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tradeComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        manualImportPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Manually select TWS/IB Gateway log file"));

        browseSettingsManual.setText("Browse");
        browseSettingsManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseSettingsManualActionPerformed(evt);
            }
        });

        settingsDirectoryManual.setEditable(false);
        settingsDirectoryManual.setToolTipText("Select path to the settings file for analysis");
        settingsDirectoryManual.setPreferredSize(new java.awt.Dimension(100, 28));
        settingsDirectoryManual.setSelectionEnd(11);
        settingsDirectoryManual.setSelectionStart(11);

        logDirectoryManual.setEditable(false);
        logDirectoryManual.setToolTipText("Select path to the log file for analysis");
        logDirectoryManual.setPreferredSize(new java.awt.Dimension(100, 28));
        logDirectoryManual.setSelectionEnd(11);
        logDirectoryManual.setSelectionStart(11);

        manualSettingsLabel.setText("Manually select settings file:");

        browseLogManual.setText("Browse");
        browseLogManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseLogManualActionPerformed(evt);
            }
        });

        jLabel7.setText("Log file location:");

        javax.swing.GroupLayout manualImportPaneLayout = new javax.swing.GroupLayout(manualImportPane);
        manualImportPane.setLayout(manualImportPaneLayout);
        manualImportPaneLayout.setHorizontalGroup(
            manualImportPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manualImportPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manualImportPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(manualSettingsLabel)
                    .addGroup(manualImportPaneLayout.createSequentialGroup()
                        .addGroup(manualImportPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(settingsDirectoryManual, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(logDirectoryManual, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(manualImportPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browseSettingsManual)
                            .addComponent(browseLogManual))))
                .addContainerGap(366, Short.MAX_VALUE))
        );
        manualImportPaneLayout.setVerticalGroup(
            manualImportPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manualImportPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manualImportPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logDirectoryManual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseLogManual))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manualSettingsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manualImportPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(settingsDirectoryManual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseSettingsManual))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout configurePaneLayout = new javax.swing.GroupLayout(configurePane);
        configurePane.setLayout(configurePaneLayout);
        configurePaneLayout.setHorizontalGroup(
            configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(downloadDiagnosticPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(importDiagnosticPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manualImportPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        configurePaneLayout.setVerticalGroup(
            configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(downloadDiagnosticPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importDiagnosticPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manualImportPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        importMethodGroup.add(useImportLocalBtn);
        useImportLocalBtn.setText("Import diagnostic file locally");
        useImportLocalBtn.setToolTipText("Choose to analyze files from extracted diagnostic zip");
        useImportLocalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useImportLocalBtnActionPerformed(evt);
            }
        });

        importMethodGroup.add(useManualFileBtn);
        useManualFileBtn.setText("Import log/settings file manually");
        useManualFileBtn.setToolTipText("Choose to analyze files imported manually");
        useManualFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useManualFileBtnActionPerformed(evt);
            }
        });

        statusLabel.setText("Status:");

        logFileStatus.setForeground(new java.awt.Color(153, 153, 153));
        logFileStatus.setText("Log File");

        settingsFileStatus.setForeground(new java.awt.Color(153, 153, 153));
        settingsFileStatus.setText("Settings File");

        analyzeBtn.setText("Analyze");
        analyzeBtn.setEnabled(false);
        analyzeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeBtnActionPerformed(evt);
            }
        });

        tradeFileStatus.setForeground(new java.awt.Color(153, 153, 153));
        tradeFileStatus.setText("Trade File");

        screenshotStatus.setForeground(new java.awt.Color(153, 153, 153));
        screenshotStatus.setText("Screenshot");

        jLabel1.setText("Choose Import Method:");

        importMethodGroup.add(useImportServerBtn);
        useImportServerBtn.setSelected(true);
        useImportServerBtn.setText("Import diagnostic file from server");
        useImportServerBtn.setToolTipText("Choose to analyze diagnostic file downloaded from server");
        useImportServerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useImportServerBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusLabel)
                            .addComponent(logFileStatus)
                            .addComponent(settingsFileStatus)
                            .addComponent(tradeFileStatus)
                            .addComponent(screenshotStatus))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(useImportServerBtn)
                            .addComponent(useImportLocalBtn)
                            .addComponent(useManualFileBtn)
                            .addComponent(jLabel1)
                            .addComponent(analyzeBtn))
                        .addContainerGap(59, Short.MAX_VALUE))))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useImportServerBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useImportLocalBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useManualFileBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logFileStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsFileStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(screenshotStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tradeFileStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyzeBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout configurePanelLayout = new javax.swing.GroupLayout(configurePanel);
        configurePanel.setLayout(configurePanelLayout);
        configurePanelLayout.setHorizontalGroup(
            configurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configurePane, javax.swing.GroupLayout.DEFAULT_SIZE, 913, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        configurePanelLayout.setVerticalGroup(
            configurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configurePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(configurePane, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE))
                .addContainerGap())
        );

        MainPane.addTab("Configure", null, configurePanel, "Configure log file locations");

        analyzeAllBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeAllBtn.setText("All");
        analyzeAllBtn.setToolTipText("Analyze all topics");
        analyzeAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeAllBtnActionPerformed(evt);
            }
        });

        analyzeEnvBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeEnvBtn.setForeground(new java.awt.Color(0, 102, 0));
        analyzeEnvBtn.setText("Env");
        analyzeEnvBtn.setToolTipText("Environmental elements");
        analyzeEnvBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeEnvBtnActionPerformed(evt);
            }
        });

        analyzeLoginSeqBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeLoginSeqBtn.setForeground(new java.awt.Color(153, 0, 0));
        analyzeLoginSeqBtn.setText("Login Seq");
        analyzeLoginSeqBtn.setToolTipText("Login sequence");
        analyzeLoginSeqBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeLoginSeqBtnActionPerformed(evt);
            }
        });

        analyzeSysResBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeSysResBtn.setForeground(new java.awt.Color(51, 102, 255));
        analyzeSysResBtn.setText("SysRes");
        analyzeSysResBtn.setToolTipText("System restart");
        analyzeSysResBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeSysResBtnActionPerformed(evt);
            }
        });

        analyzeMktDataBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeMktDataBtn.setForeground(new java.awt.Color(255, 102, 0));
        analyzeMktDataBtn.setText("Market Data");
        analyzeMktDataBtn.setToolTipText("Market Data (To see the market data routing, use Regexp search: farm)");
        analyzeMktDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeMktDataBtnActionPerformed(evt);
            }
        });

        analyzeConnBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeConnBtn.setForeground(new java.awt.Color(255, 0, 0));
        analyzeConnBtn.setText("Conn");
        analyzeConnBtn.setToolTipText("Connectivity (Works only for TWS 928 or later. For earlier versions, user the Regexp search: status [1-9]$)");
        analyzeConnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeConnBtnActionPerformed(evt);
            }
        });

        analyzeHtbpBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeHtbpBtn.setForeground(new java.awt.Color(255, 102, 153));
        analyzeHtbpBtn.setText("Htbp");
        analyzeHtbpBtn.setToolTipText("Hot Backup Lines");
        analyzeHtbpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeHtbpBtnActionPerformed(evt);
            }
        });

        analyzeAPIBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeAPIBtn.setForeground(new java.awt.Color(153, 51, 255));
        analyzeAPIBtn.setText("API");
        analyzeAPIBtn.setToolTipText("API (Detailed logging)");
        analyzeAPIBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeAPIBtnActionPerformed(evt);
            }
        });

        analyzeOrdTrdBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeOrdTrdBtn.setForeground(new java.awt.Color(0, 204, 204));
        analyzeOrdTrdBtn.setText("Orders & Trades");
        analyzeOrdTrdBtn.setToolTipText("Orders & Trades");
        analyzeOrdTrdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeOrdTrdBtnActionPerformed(evt);
            }
        });

        clearAllBtn.setText("Clear All");
        clearAllBtn.setToolTipText("Clear all display pane");
        clearAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllBtnActionPerformed(evt);
            }
        });

        autoClsCheck.setSelected(true);
        autoClsCheck.setText("Auto Clear");
        autoClsCheck.setToolTipText("Automatic clear all display panes after extraction of diagnostic file");
        autoClsCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoClsCheckActionPerformed(evt);
            }
        });

        deepAnalysisCheck.setSelected(true);
        deepAnalysisCheck.setText("Deep Analysis");
        deepAnalysisCheck.setToolTipText("This feature has been deprecated. All analysis is defaulted to use \"Deep\" analysis.");
        deepAnalysisCheck.setEnabled(false);
        deepAnalysisCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deepAnalysisCheckActionPerformed(evt);
            }
        });

        includeXmlCheck.setSelected(true);
        includeXmlCheck.setText("Include Tws.xml in analysis");
        includeXmlCheck.setToolTipText("Select to include settings xml file analysis");
        includeXmlCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeXmlCheckActionPerformed(evt);
            }
        });

        includeTrdFileCheck.setText("Include .Trd files in analysis");
        includeTrdFileCheck.setToolTipText("Select to include day.trd file analysis in Orders & Trades");
        includeTrdFileCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeTrdFileCheckActionPerformed(evt);
            }
        });

        openLogFileBtn.setText("Open Log File");
        openLogFileBtn.setToolTipText("Open the selected log file with the default Text Editor on your computer");
        openLogFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openLogFileBtnActionPerformed(evt);
            }
        });

        regExText.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        regExText.setForeground(new java.awt.Color(102, 102, 102));
        regExText.setText("RegEx Search...");
        regExText.setToolTipText("Search in the entire logfile and could take long. Be sure to respect regexp syntax as per https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html");
        regExText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                regExTextFocusGained(evt);
            }
        });

        matchCaseCheck.setText("Match Case");

        regExSearchBtn.setText("Search");
        regExSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regExSearchBtnActionPerformed(evt);
            }
        });

        screenshotComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screenshotComboBoxActionPerformed(evt);
            }
        });

        openScreenshotBtn.setText("Open Screenshot");
        openScreenshotBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openScreenshotBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(autoClsCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deepAnalysisCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(includeXmlCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(includeTrdFileCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(openLogFileBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(analyzeAllBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeEnvBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeLoginSeqBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeSysResBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeMktDataBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeConnBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeHtbpBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeAPIBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeOrdTrdBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearAllBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(screenshotComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openScreenshotBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(matchCaseCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(regExSearchBtn))
                    .addComponent(regExText, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(analyzeAllBtn)
                    .addComponent(analyzeEnvBtn)
                    .addComponent(analyzeLoginSeqBtn)
                    .addComponent(analyzeSysResBtn)
                    .addComponent(analyzeMktDataBtn)
                    .addComponent(analyzeConnBtn)
                    .addComponent(analyzeHtbpBtn)
                    .addComponent(analyzeAPIBtn)
                    .addComponent(analyzeOrdTrdBtn)
                    .addComponent(clearAllBtn)
                    .addComponent(regExText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(screenshotComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoClsCheck)
                    .addComponent(deepAnalysisCheck)
                    .addComponent(includeXmlCheck)
                    .addComponent(includeTrdFileCheck)
                    .addComponent(openLogFileBtn)
                    .addComponent(matchCaseCheck)
                    .addComponent(regExSearchBtn)
                    .addComponent(openScreenshotBtn)))
        );

        javax.swing.GroupLayout textMainPaneLayout = new javax.swing.GroupLayout(textMainPane);
        textMainPane.setLayout(textMainPaneLayout);
        textMainPaneLayout.setHorizontalGroup(
            textMainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        textMainPaneLayout.setVerticalGroup(
            textMainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout twsLogFilterPanelLayout = new javax.swing.GroupLayout(twsLogFilterPanel);
        twsLogFilterPanel.setLayout(twsLogFilterPanelLayout);
        twsLogFilterPanelLayout.setHorizontalGroup(
            twsLogFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(textMainPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        twsLogFilterPanelLayout.setVerticalGroup(
            twsLogFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(twsLogFilterPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textMainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        MainPane.addTab("Log Filter", twsLogFilterPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPane, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void customInitTextPaneComponents(){
        // Initialize display panels
        logDisplayPane1 = new javax.swing.JPanel();
        logDisplayPane2 = new javax.swing.JPanel();
        logDisplayPane3 = new javax.swing.JPanel();
        
        //logDisplayPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        logDisplayPane1.setPreferredSize(new java.awt.Dimension(textMainPane.getSize().width, (int)((textMainPane.getSize().height-50)*0.4)));
        
        //logDisplayPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        logDisplayPane2.setPreferredSize(new java.awt.Dimension(textMainPane.getSize().width, (int)((textMainPane.getSize().height-50)*0.35)));
        
        //logDisplayPane3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        logDisplayPane3.setPreferredSize(new java.awt.Dimension(textMainPane.getSize().width, (int)((textMainPane.getSize().height-50)*0.25)));
        
        // ENV, CONN and LOGIN SEQ
        envTextPane = new javax.swing.JTextPane();
        envTextPane.setName("Environmental");
        envTextPane.setEditable(false);
        
        envTextScrollPane = new javax.swing.JScrollPane(envTextPane);
        envTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        envTextScrollPane.setViewportView(envTextPane);
        envTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 0), 2, true), "Environmental", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0)));
        
        loginSeqTextPane = new javax.swing.JTextPane();
        loginSeqTextPane.setName("Login Sequence");
        loginSeqTextPane.setEditable(false);
        
        loginSeqTextScrollPane = new javax.swing.JScrollPane(loginSeqTextPane);
        loginSeqTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        loginSeqTextScrollPane.setViewportView(loginSeqTextPane);
        loginSeqTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 0, 0), 2, true), "Login Sequence", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(153, 0, 0)));
        
        
        connTextPane = new javax.swing.JTextPane();
        connTextPane.setName("Connectivity");
        connTextPane.setEditable(false);
        
        connTextScrollPane = new javax.swing.JScrollPane(connTextPane);
        connTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        connTextScrollPane.setViewportView(connTextPane);
        connTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 2, true), "Connectivity", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 0)));
        
        envTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane1.getPreferredSize().width*0.5), (int)(logDisplayPane1.getPreferredSize().height*0.45)));
        loginSeqTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane1.getPreferredSize().width*0.5), (int)(logDisplayPane1.getPreferredSize().height*0.55)));
        connTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane1.getPreferredSize().width*0.5), (int)(logDisplayPane1.getPreferredSize().height)));
        
        // Double click to open a new window for displaying the information involved
        envTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(envTextPane, envTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        loginSeqTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(loginSeqTextPane, loginSeqTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        connTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(connTextPane, connTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        javax.swing.GroupLayout logDisplayPane1Layout = new javax.swing.GroupLayout(logDisplayPane1);
        logDisplayPane1.setLayout(logDisplayPane1Layout);
        
        logDisplayPane1Layout.setAutoCreateGaps(true);
        
        logDisplayPane1Layout.setHorizontalGroup(
                logDisplayPane1Layout.createSequentialGroup()
                        .addGroup(logDisplayPane1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(envTextScrollPane)
                                .addComponent(loginSeqTextScrollPane))
                        .addComponent(connTextScrollPane)
        );
        
        logDisplayPane1Layout.setVerticalGroup(
                logDisplayPane1Layout.createParallelGroup()
                        .addGroup(logDisplayPane1Layout.createSequentialGroup()
                                .addComponent(envTextScrollPane)
                                .addComponent(loginSeqTextScrollPane))
                        .addComponent(connTextScrollPane)
        );
        
        // Sysres, Htbp and API
        sysResTextPane = new javax.swing.JTextPane();
        sysResTextPane.setName("System Reset");
        sysResTextPane.setEditable(false);
        
        sysResTextScrollPane = new javax.swing.JScrollPane(sysResTextPane);
        sysResTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        sysResTextScrollPane.setViewportView(sysResTextPane);
        sysResTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 102, 255), 2, true), "System Reset", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 102, 255)));
        
        htbpTextPane = new javax.swing.JTextPane();
        htbpTextPane.setName("Hot Backup Lines");
        htbpTextPane.setEditable(false);
        
        htbpTextScrollPane = new javax.swing.JScrollPane(htbpTextPane);
        htbpTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        htbpTextScrollPane.setViewportView(htbpTextPane);
        htbpTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 153), 2, true), "Hot Backup Lines", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 102, 153)));
        
        apiTextPane = new javax.swing.JTextPane();
        apiTextPane.setName("API");
        apiTextPane.setEditable(false);
        
        apiTextScrollPane = new javax.swing.JScrollPane(apiTextPane);
        apiTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        apiTextScrollPane.setViewportView(apiTextPane);
        apiTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 51, 255), 2, true), "API", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(153, 51, 255)));
        
        sysResTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane2.getPreferredSize().width*0.5), (int)(logDisplayPane2.getPreferredSize().height)));
        htbpTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane2.getPreferredSize().width*0.5), (int)(logDisplayPane2.getPreferredSize().height*0.4)));
        apiTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane2.getPreferredSize().width*0.5), (int)(logDisplayPane2.getPreferredSize().height*0.6)));
        
        sysResTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(sysResTextPane, sysResTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        htbpTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(htbpTextPane, htbpTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        apiTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(apiTextPane, apiTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        javax.swing.GroupLayout logDisplayPane2Layout = new javax.swing.GroupLayout(logDisplayPane2);
        logDisplayPane2.setLayout(logDisplayPane2Layout);
        
        logDisplayPane2Layout.setAutoCreateGaps(true);
        
        logDisplayPane2Layout.setHorizontalGroup(
                logDisplayPane2Layout.createSequentialGroup()
                        .addComponent(sysResTextScrollPane)
                        .addGroup(logDisplayPane2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(htbpTextScrollPane)
                                .addComponent(apiTextScrollPane))
        );
        
        logDisplayPane2Layout.setVerticalGroup(
                logDisplayPane2Layout.createParallelGroup()
                        .addComponent(sysResTextScrollPane)
                        .addGroup(logDisplayPane2Layout.createSequentialGroup()
                                .addComponent(htbpTextScrollPane)
                                .addComponent(apiTextScrollPane))
        );
        
        
        // Market Data and Orders & Trades
        mktDataTextPane = new javax.swing.JTextPane();
        mktDataTextPane.setName("Market Data");
        mktDataTextPane.setEditable(false);
        
        mktDataTextScrollPane = new javax.swing.JScrollPane(mktDataTextPane);
        mktDataTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        mktDataTextScrollPane.setViewportView(mktDataTextPane);
        mktDataTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 2, true), "Market Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 102, 0)));
        
        
        ordTrdTextPane = new javax.swing.JTextPane();
        ordTrdTextPane.setName("Orders & Trades");
        ordTrdTextPane.setEditable(false);
        
        ordTrdTextScrollPane = new javax.swing.JScrollPane(ordTrdTextPane);
        ordTrdTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        ordTrdTextScrollPane.setViewportView(ordTrdTextPane);
        ordTrdTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 204), 2, true), "Orders & Trades", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 204, 204)));
        
        
        mktDataTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane3.getPreferredSize().width*0.5), (int)(logDisplayPane3.getPreferredSize().height)));
        ordTrdTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane3.getPreferredSize().width*0.5), (int)(logDisplayPane3.getPreferredSize().height)));
        
        mktDataTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(mktDataTextPane, mktDataTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        ordTrdTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(ordTrdTextPane, ordTrdTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        javax.swing.GroupLayout logDisplayPane3Layout = new javax.swing.GroupLayout(logDisplayPane3);
        logDisplayPane3.setLayout(logDisplayPane3Layout);
        
        logDisplayPane3Layout.setAutoCreateGaps(true);
        
        logDisplayPane3Layout.setHorizontalGroup(
                logDisplayPane3Layout.createSequentialGroup()
                        .addComponent(mktDataTextScrollPane)
                        .addComponent(ordTrdTextScrollPane)
        );
        
        logDisplayPane3Layout.setVerticalGroup(
                logDisplayPane3Layout.createParallelGroup()
                        .addComponent(mktDataTextScrollPane)
                        .addComponent(ordTrdTextScrollPane)
        );
        
        // Add log display panes to main text pane
        textMainPane.removeAll();
        javax.swing.GroupLayout textMainPaneLayout = new javax.swing.GroupLayout(textMainPane);
        textMainPane.setLayout(textMainPaneLayout);
        textMainPaneLayout.setHorizontalGroup(
                textMainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(logDisplayPane1, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logDisplayPane2, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logDisplayPane3, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        textMainPaneLayout.setVerticalGroup(
                textMainPaneLayout.createSequentialGroup()
                        .addComponent(logDisplayPane1, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logDisplayPane2, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logDisplayPane3, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }
    
    private void useImportLocalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useImportLocalBtnActionPerformed
        //TitledBorder titledBorder = (TitledBorder) importDiagnosticPane.getBorder();
        //titledBorder.setTitleColor(Color.GREEN.darker());

        // Log section
        if(logComboBox2.getSelectedItem() != null){
            localManager.selectLogFile(logComboBox2.getSelectedItem().toString(), false);
            // Set Status
            logReady_local = true;
            updateStatus();
        } else {
            localManager.selectLogFile(null, false);
            // Set Status
            logReady_local = false;
            updateStatus();
        }
        
        // Settings section
        if(settingsComboBox2.getSelectedItem() != null){
            localManager.selectSettingsFile(settingsComboBox2.getSelectedItem().toString(), false);
            // Set Status
            settingsReady_local = true;
            updateStatus();
        } else {
            localManager.selectSettingsFile(null, false);
            // Set Status
            settingsReady_local = false;
            updateStatus();
        }
        
        // Trading section
        if(tradeComboBox2.getSelectedItem() != null){
            localManager.selectTradeFile(tradeComboBox2.getSelectedItem().toString());
            // Set Status
            trdReady_local = true;
            updateStatus();
        } else {
            localManager.selectTradeFile(null);
            // Set Status
            trdReady_local = false;
            updateStatus();
        }
        
        // Screenshot section
        // Screenshot section
        // Reload screenshot for server manager
        screenshotComboBox.setSelectedItem(null);
        screenshotComboBox.removeAllItems();
        isScreenshotAdded = false;
                
        handleScreenshotComboBox(LogReader.USELOCAL);
        
        if(screenshotComboBox.getSelectedItem() != null){
            localManager.selectScreenshot(screenshotComboBox.getSelectedItem().toString());
            // Set Status
            screenshotReady_local = true;
            updateStatus();
        } else {
            localManager.selectScreenshot(null);
            // Set Status
            screenshotReady_local = false;
            updateStatus();
        }
        
        // Have main window show extracted directory
        if(isExtracted_local){
            this.setTitle("Log Analyzer - " + extractDirectory2.getText());
        }
    }//GEN-LAST:event_useImportLocalBtnActionPerformed
    
    private void useManualFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useManualFileBtnActionPerformed
        trdReady_local = false; // Do not include trade file if log file choose manually        
        
        // Log section
        if(!logDirectoryManual.getText().isEmpty()){
            localManager.selectLogFile(logDirectoryManual.getText(), true);
            // Set Status
            logReady_local = true;
            updateStatus();
        } else {
            localManager.selectLogFile(null, true);
            logReady_local = false;
            updateStatus();
        }
        
        // Settings section
        if(!settingsDirectoryManual.getText().isEmpty()){
            localManager.selectSettingsFile(settingsDirectoryManual.getText(), true);
            // Set Status
            settingsReady_local = true;
            updateStatus();
        } else {
            localManager.selectSettingsFile(null, true);
            settingsReady_local = false;
            updateStatus();
        }
        
        // Have main window show extracted directory
        if(logDirectoryManual.getText().isEmpty()){
            this.setTitle("Log Analyzer");
        } else {
            this.setTitle("Log Analyzer - " + logDirectoryManual.getText());
        }
    }//GEN-LAST:event_useManualFileBtnActionPerformed
    
    class AnalyzeWorkTask extends SwingWorker<Boolean, Object>{
        int choice;
        
        public AnalyzeWorkTask(int choice){
            this.choice = choice;
        }
        
        @Override
        public Boolean doInBackground(){
            if(useImportServerBtn.isSelected() && logReady_server){
                serverManager.startParse(choice, textPaneList);
                return true;
            } else if(!useImportServerBtn.isSelected() && logReady_local){
                localManager.startParse(choice, useManualFileBtn.isSelected(), textPaneList);
                return true;
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
                return false;
            }
        }
        
        @Override
        public void done(){ }
    }
    
    private void analyzeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeBtnActionPerformed
        MainPane.setSelectedComponent(twsLogFilterPanel);
    }//GEN-LAST:event_analyzeBtnActionPerformed
    
    private void analyzeEnvBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeEnvBtnActionPerformed
        AnalyzeWorkTask m_task = new AnalyzeWorkTask(Choices.ENV);
        m_task.execute();
    }//GEN-LAST:event_analyzeEnvBtnActionPerformed
    
    private void deepAnalysisCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deepAnalysisCheckActionPerformed
        /* //Deprecated
        if(deepAnalysisCheck.isSelected()){
            localManager.setDeepDiagnostic(true);
        } else {
            localManager.setDeepDiagnostic(false);
        }
        */
    }//GEN-LAST:event_deepAnalysisCheckActionPerformed
                                                    
    private void analyzeLoginSeqBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeLoginSeqBtnActionPerformed
        AnalyzeWorkTask m_task = new AnalyzeWorkTask(Choices.LOGINSEQ);
        m_task.execute(); 
    }//GEN-LAST:event_analyzeLoginSeqBtnActionPerformed
    
    private void analyzeConnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeConnBtnActionPerformed
        AnalyzeWorkTask m_task = new AnalyzeWorkTask(Choices.CONN);
        m_task.execute();
    }//GEN-LAST:event_analyzeConnBtnActionPerformed
    
    private void analyzeSysResBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeSysResBtnActionPerformed
        AnalyzeWorkTask m_task = new AnalyzeWorkTask(Choices.SYSRES);
        m_task.execute();
    }//GEN-LAST:event_analyzeSysResBtnActionPerformed
    
    private void analyzeMktDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeMktDataBtnActionPerformed
        AnalyzeWorkTask m_task = new AnalyzeWorkTask(Choices.MKTDATA);
        m_task.execute();
    }//GEN-LAST:event_analyzeMktDataBtnActionPerformed
    
    private void analyzeHtbpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeHtbpBtnActionPerformed
        AnalyzeWorkTask m_task = new AnalyzeWorkTask(Choices.HTBP);
        m_task.execute();
    }//GEN-LAST:event_analyzeHtbpBtnActionPerformed
    
    private void analyzeAPIBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeAPIBtnActionPerformed
        AnalyzeWorkTask m_task = new AnalyzeWorkTask(Choices.API);
        m_task.execute();
    }//GEN-LAST:event_analyzeAPIBtnActionPerformed
    
    private void analyzeOrdTrdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeOrdTrdBtnActionPerformed
        AnalyzeWorkTask m_task = new AnalyzeWorkTask(Choices.ORDERSTRDS);
        m_task.execute();
    }//GEN-LAST:event_analyzeOrdTrdBtnActionPerformed
    
    private void analyzeAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeAllBtnActionPerformed
        if(useImportServerBtn.isSelected() && logReady_server){
            if(serverManager.checkFileSizeForAll()){
                int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The selected log file is larger than 5 MB, do you want to proceed?");
                if(reply == javax.swing.JOptionPane.NO_OPTION)
                    return;
            }
            
            analyzeEnvBtnActionPerformed(null);
            analyzeLoginSeqBtnActionPerformed(null);
            analyzeConnBtnActionPerformed(null);
            analyzeSysResBtnActionPerformed(null);
            analyzeMktDataBtnActionPerformed(null);
            analyzeHtbpBtnActionPerformed(null);
            analyzeAPIBtnActionPerformed(null);
            analyzeOrdTrdBtnActionPerformed(null);
            
            /*
            serverManager.startParse(Choices.ENV, textPaneList);
            serverManager.startParse(Choices.LOGINSEQ, textPaneList);
            serverManager.startParse(Choices.CONN, textPaneList);
            serverManager.startParse(Choices.SYSRES, textPaneList);
            serverManager.startParse(Choices.HTBP, textPaneList);
            serverManager.startParse(Choices.API, textPaneList);
            serverManager.startParse(Choices.MKTDATA, textPaneList);
            serverManager.startParse(Choices.ORDERSTRDS, textPaneList);
            */
        } else if(!useImportServerBtn.isSelected() && logReady_local){
            if(localManager.checkFileSizeForAll(useManualFileBtn.isSelected())){
                int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The selected log file is larger than 5 MB, do you want to proceed?");
                if(reply == javax.swing.JOptionPane.NO_OPTION)
                    return;
            }
            
            localManager.startParse(Choices.ENV, useManualFileBtn.isSelected(), textPaneList);
            localManager.startParse(Choices.LOGINSEQ, useManualFileBtn.isSelected(), textPaneList);
            localManager.startParse(Choices.CONN, useManualFileBtn.isSelected(), textPaneList);
            localManager.startParse(Choices.SYSRES, useManualFileBtn.isSelected(), textPaneList);
            localManager.startParse(Choices.HTBP, useManualFileBtn.isSelected(), textPaneList);
            localManager.startParse(Choices.API, useManualFileBtn.isSelected(), textPaneList);
            localManager.startParse(Choices.MKTDATA, useManualFileBtn.isSelected(), textPaneList);
            localManager.startParse(Choices.ORDERSTRDS, useManualFileBtn.isSelected(), textPaneList);
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_analyzeAllBtnActionPerformed
    
    private void clearAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllBtnActionPerformed
        textPaneList.get(Choices.ENV).setText(null);
        textPaneList.get(Choices.LOGINSEQ).setText(null);
        textPaneList.get(Choices.CONN).setText(null);
        textPaneList.get(Choices.SYSRES).setText(null);
        textPaneList.get(Choices.HTBP).setText(null);
        textPaneList.get(Choices.API).setText(null);
        textPaneList.get(Choices.MKTDATA).setText(null);
        textPaneList.get(Choices.ORDERSTRDS).setText(null);
    }//GEN-LAST:event_clearAllBtnActionPerformed

    private void includeXmlCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeXmlCheckActionPerformed
        if(useImportServerBtn.isSelected()){
            if(includeXmlCheck.isSelected()){
                serverManager.setIncludeXml(true);
            } else {
                serverManager.setIncludeXml(false);
            }
        } else {
            if(includeXmlCheck.isSelected()){
                localManager.setIncludeXml(true);
            } else {
                localManager.setIncludeXml(false);
            }
        }
    }//GEN-LAST:event_includeXmlCheckActionPerformed

    private void includeTrdFileCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeTrdFileCheckActionPerformed
        if(useImportServerBtn.isSelected()){
            if(includeTrdFileCheck.isSelected()){
                serverManager.setIncludeTrd(true);
            } else {
                serverManager.setIncludeTrd(false);
            }
        } else {
            if(includeTrdFileCheck.isSelected()){
                localManager.setIncludeTrd(true);
            } else {
                localManager.setIncludeTrd(false);
            }
        }
    }//GEN-LAST:event_includeTrdFileCheckActionPerformed

    private void autoClsCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoClsCheckActionPerformed
        if(useImportServerBtn.isSelected()){
            if(autoClsCheck.isSelected()){
                serverManager.setAutoCls(true);
            } else {
                serverManager.setAutoCls(false);
            }
        } else {
            if(autoClsCheck.isSelected()){
                localManager.setAutoCls(true);
            } else {
                localManager.setAutoCls(false);
            }
        }
    }//GEN-LAST:event_autoClsCheckActionPerformed

    private void openLogFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openLogFileBtnActionPerformed
        if(useImportServerBtn.isSelected() && logReady_server){
            serverManager.openLogFileInNotePad(useManualFileBtn.isSelected());
        } else if(!useImportServerBtn.isSelected() && logReady_local){
            localManager.openLogFileInNotePad(useManualFileBtn.isSelected());
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_openLogFileBtnActionPerformed

    private void regExSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regExSearchBtnActionPerformed
        if(useImportServerBtn.isSelected() && logReady_server){
            if(!regExText.getText().isEmpty()){
                
                javax.swing.JTextPane regExTextPane = new javax.swing.JTextPane();
                regExTextPane.setName("Regular Expression Search");
                regExTextPane.setEditable(false);
                
                javax.swing.JScrollPane regExScrollPane = new javax.swing.JScrollPane(regExTextPane);
                regExScrollPane.setViewportView(regExTextPane);
                regExScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Regular Expression Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0)));
                
                serverManager.regExSearch(regExText.getText(), matchCaseCheck.isSelected(), regExTextPane);
                
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(regExTextPane, regExScrollPane);
                        magnifiedDisplayPane.setVisible(true);
                    }
                });
            }
        } else if(!useImportServerBtn.isSelected() && logReady_local){
            if(!regExText.getText().isEmpty()){
                
                javax.swing.JTextPane regExTextPane = new javax.swing.JTextPane();
                regExTextPane.setName("Regular Expression Search");
                regExTextPane.setEditable(false);
                
                javax.swing.JScrollPane regExScrollPane = new javax.swing.JScrollPane(regExTextPane);
                regExScrollPane.setViewportView(regExTextPane);
                regExScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Regular Expression Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0)));
                
                localManager.regExSearch(useManualFileBtn.isSelected(), regExText.getText(), matchCaseCheck.isSelected(), regExTextPane);
                
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(regExTextPane, regExScrollPane);
                        magnifiedDisplayPane.setVisible(true);
                    }
                });
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_regExSearchBtnActionPerformed

    private void openScreenshotBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openScreenshotBtnActionPerformed
        if(useImportServerBtn.isSelected() && screenshotReady_server){
            serverManager.openScreenshot();
        } else if(!useImportServerBtn.isSelected() && screenshotReady_local){
            localManager.openScreenshot();
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No screenshot selected");
        }
    }//GEN-LAST:event_openScreenshotBtnActionPerformed

    private void screenshotComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenshotComboBoxActionPerformed
        if(useImportServerBtn.isSelected() && screenshotReady_server){
            if(screenshotComboBox.getSelectedItem() != null){
                serverManager.selectScreenshot(screenshotComboBox.getSelectedItem().toString());
            }
        } else if(!useImportServerBtn.isSelected() && screenshotReady_local){
            if(screenshotComboBox.getSelectedItem() != null){
                localManager.selectScreenshot(screenshotComboBox.getSelectedItem().toString());
            }
        }
    }//GEN-LAST:event_screenshotComboBoxActionPerformed

    private void tradeComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradeComboBox2ActionPerformed
        if(tradeComboBox2.getSelectedItem() != null){
            localManager.selectTradeFile(tradeComboBox2.getSelectedItem().toString());

            // Set Status
            if(useImportLocalBtn.isSelected()){
                trdReady_local = true;
                updateStatus();
            }
        }
    }//GEN-LAST:event_tradeComboBox2ActionPerformed

    private void browseLogManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseLogManualActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File choosedFile = fileChooser.getSelectedFile();
            if(!(choosedFile.getAbsolutePath().endsWith(".log") || choosedFile.getAbsolutePath().endsWith(".txt"))){
                javax.swing.JOptionPane.showMessageDialog(null, "Please choose a valid log file.");
                return;
            }
            logDirectoryManual.setText(choosedFile.getAbsolutePath());
            if(useManualFileBtn.isSelected()){
                localManager.selectLogFile(logDirectoryManual.getText(), true);
                logReady_local = true;
                updateStatus();
            }
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find file.");
        }
    }//GEN-LAST:event_browseLogManualActionPerformed

    private void ibgRadio2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ibgRadio2ActionPerformed

        localManager.setIsTws(false);

        // Populate and select log file for combo box
        handleLogComboBox_ibg(LogReader.USELOCAL);

        // Populate and select settings file for combo box
        handleSettingsComboBox_ibg(LogReader.USELOCAL);
        
        // Populate and select trade file for combo box
        handleTradeComboBox(LogReader.USELOCAL);

        // Populate and select screenshot for combo box
        handleScreenshotComboBox(LogReader.USELOCAL);
    }//GEN-LAST:event_ibgRadio2ActionPerformed

    private void twsRadio2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twsRadio2ActionPerformed

        localManager.setIsTws(true);

        // Populate and select log file for combo box
        handleLogComboBox_tws(LogReader.USELOCAL);

        // Populate and select settings file for combo box
        handleSettingsComboBox_tws(LogReader.USELOCAL);

        // Populate and select trade file for combo box
        handleTradeComboBox(LogReader.USELOCAL);

        // Populate and select screenshot for combo box
        handleScreenshotComboBox(LogReader.USELOCAL);
    }//GEN-LAST:event_twsRadio2ActionPerformed

    private void browseExtract2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseExtract2ActionPerformed
        int returnVal = directoryChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File directory = directoryChooser.getSelectedFile();
            extractDirectory2.setText(directory.getAbsolutePath());
            localManager.setReaderLocation(null, extractDirectory2.getText());
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find directory.");
        }
    }//GEN-LAST:event_browseExtract2ActionPerformed

    private void browseZip2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseZip2ActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            diagnosticFile_local = fileChooser.getSelectedFile();
            if(!diagnosticFile_local.getAbsolutePath().endsWith(".zip")){
                javax.swing.JOptionPane.showMessageDialog(null, "Please choose a valid .zip diagnostic file");
                return;
            }
            loadDirectory2.setText(diagnosticFile_local.getAbsolutePath());
            extractDirectory2.setText(diagnosticFile_local.getAbsolutePath() + "_ext");
            localManager.setReaderLocation(loadDirectory2.getText(), extractDirectory2.getText());
            extractProgressBar2.setValue(0);
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find file.");
        }
    }//GEN-LAST:event_browseZip2ActionPerformed

    private void browseSettingsManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseSettingsManualActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File choosedFile = fileChooser.getSelectedFile();
            if(!choosedFile.getAbsolutePath().endsWith(".xml")){
                javax.swing.JOptionPane.showMessageDialog(null, "Please choose a valid settings file");
                return;
            }
            settingsDirectoryManual.setText(fileChooser.getSelectedFile().getAbsolutePath());
            if(useManualFileBtn.isSelected()){
                localManager.selectSettingsFile(settingsDirectoryManual.getText(), true);
                settingsReady_local = true;
                updateStatus();
            }
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find file.");
        }
    }//GEN-LAST:event_browseSettingsManualActionPerformed

    private void settingsComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsComboBox2ActionPerformed
        if(settingsComboBox2.getSelectedItem() != null){
            localManager.selectSettingsFile(settingsComboBox2.getSelectedItem().toString(), false);

            // Set Status
            if(useImportLocalBtn.isSelected()){
                settingsReady_local = true;
                updateStatus();
            }
        }
    }//GEN-LAST:event_settingsComboBox2ActionPerformed

    private void logComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logComboBox2ActionPerformed
        // TODO add your handling code here:
        if(logComboBox2.getSelectedItem() != null){
            localManager.selectLogFile(logComboBox2.getSelectedItem().toString(), false);

            // Set Status
            if(useImportLocalBtn.isSelected()){
                logReady_local = true;
                updateStatus();
            }
        }
    }//GEN-LAST:event_logComboBox2ActionPerformed
    
    class ExtractWorkerTast2 extends SwingWorker<Boolean, Integer>{
        @Override
        public Boolean doInBackground(){
            // Initialize tws/ibg log combo box
            logComboBox2.setSelectedItem(null);
            logComboBox2.removeAllItems();
            isTwsLogAdded_local = false;
            isIbgLogAdded_local = false;
            publish(5);
            
            // Iniatialize settings combo box
            settingsComboBox2.setSelectedItem(null);
            settingsComboBox2.removeAllItems();
            isTwsSettingsAdded_local = false;
            isIbgSettingsAdded_local = false;
            publish(10);
            
            // Initialize trade combo box
            tradeComboBox2.setSelectedItem(null);
            tradeComboBox2.removeAllItems();
            isTradeFileAdded_local = false;
            publish(15);
            
            // Initialize screenshot combo box
            if(useImportLocalBtn.isSelected()){
                screenshotComboBox.setSelectedItem(null);
                screenshotComboBox.removeAllItems();
                isScreenshotAdded = false;
            }
            publish(20);
            
            localManager.resetAllFileList();
            publish(30);
            
            localManager.extract();
            isExtracted_local = true;
            publish(70);
            
            if(twsRadio2.isSelected()){
                // Populate and select log file for combo box
                handleLogComboBox_tws(LogReader.USELOCAL);
                publish(75);
                
                // Populate and select settings file for combo box
                handleSettingsComboBox_tws(LogReader.USELOCAL);
                publish(80);
                
                // Populate and select trade file for combo box
                handleTradeComboBox(LogReader.USELOCAL);
                publish(85);
                
                // Populate and select screenshot for combo box
                handleScreenshotComboBox(LogReader.USELOCAL);
                publish(90);
            } else if(ibgRadio2.isSelected()){
                // Populate and select log file for combo box
                handleLogComboBox_ibg(LogReader.USELOCAL);
                publish(76);
                
                // Populate and select settings file for combo box
                handleSettingsComboBox_ibg(LogReader.USELOCAL);
                publish(82);
                
                // Populate and select screenshot for combo box
                handleScreenshotComboBox(LogReader.USELOCAL);
                publish(90);
            }
            
            if(autoClsCheck.isSelected()){
                textPaneList.get(Choices.ENV).setText(null);
                textPaneList.get(Choices.LOGINSEQ).setText(null);
                textPaneList.get(Choices.CONN).setText(null);
                textPaneList.get(Choices.SYSRES).setText(null);
                textPaneList.get(Choices.HTBP).setText(null);
                textPaneList.get(Choices.API).setText(null);
                textPaneList.get(Choices.MKTDATA).setText(null);
                textPaneList.get(Choices.ORDERSTRDS).setText(null);
            }
            publish(100);
            
            return true;
        }
        
        public void process(List<Integer> chuncks){
            for(Integer progress: chuncks){
                extractProgressBar2.setValue(progress);
            }
        }
    }
    
    private void extractBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractBtn2ActionPerformed
        // Trigger error if the file selected is not a .zip file
        if(!localManager.checkValidZipLocation()){
            javax.swing.JOptionPane.showMessageDialog(null, "Please choose a valid .zip diagnostic file");
            return;
        }

        File directory = new File(extractDirectory2.getText());
        if(directory.isDirectory()){ // If the output directory selected already exist
            int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The directory already exists. Do you want to clear the " + extractDirectory2.getText() + " folder first?");
            if(reply == javax.swing.JOptionPane.YES_OPTION){
                try{
                    FileUtils.cleanDirectory(directory); // Clear extract directory
                } catch (IOException e){
                    e.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(null, "Failed to clear directory");
                }

                extractDirectory2.setText(directory.toString());
                localManager.setReaderLocation(null, extractDirectory2.getText());
                
                ExtractWorkerTast2 m_task = new ExtractWorkerTast2();
                m_task.execute();

                // Have main window show extracted directory
                if(useImportLocalBtn.isSelected()){
                    this.setTitle("Log Analyzer - " + extractDirectory2.getText());
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Please choose a valid directory");
                extractDirectory2.setText(System.getProperty("user.home").toString() + "\\Temp");
                extractProgressBar2.setValue(0); /*Progress bar setting*/
            }
        }
        else {
            int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The directory " + extractDirectory2.getText() + " does not exist. Do you want to create it?");
            if(reply == javax.swing.JOptionPane.YES_OPTION){
                directory.mkdir();
                extractDirectory2.setText(directory.toString());
                localManager.setReaderLocation(null, extractDirectory2.getText());
                
                ExtractWorkerTast2 m_task = new ExtractWorkerTast2();
                m_task.execute();

                // Have main window show extracted directory
                if(useImportLocalBtn.isSelected()){
                    this.setTitle("Log Analyzer - " + extractDirectory2.getText());
                }
            }
            else {
                javax.swing.JOptionPane.showMessageDialog(null, "Failed to load directory. Please find a different directory.");
                extractDirectory2.setText(System.getProperty("user.home").toString() + "\\Temp");
                extractProgressBar2.setValue(0); /*Progress bar setting*/
            }
        }
    }//GEN-LAST:event_extractBtn2ActionPerformed
    
    class LoadingWorkTask extends SwingWorker<Boolean, Object> {
        private String username = null;
        
        public LoadingWorkTask(String username){
            this.username = username;
        }
        
        @Override
        public Boolean doInBackground(){
            serverManager.clearUserDiagnosticFileList();
            
            return serverManager.loadUserDiagnosticFileList(username);
        }
        
        @Override
        protected void done(){
            try{
                if(get()){
                    handleUserDiagnosticFileBox();
                    loadingLabel.setVisible(false);
                } else {
                    javax.swing.JOptionPane.showMessageDialog(null, "No diagnostic file has been found for the username: " + username);
                    loadingLabel.setVisible(false);
                }
            } catch (Exception e){
                e.printStackTrace();
            }
        }
    }
    
    private void loadUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadUserBtnActionPerformed
        String username = usernameText.getText();
        if(username.length() < 8 || username.length() > 9){
            javax.swing.JOptionPane.showMessageDialog(null, "Please specify a valid username");
        } else {
            // Loading circle
            try{
            loadingLabel.setText("");
            URL image = this.getClass().getClassLoader().getResource("resources/loading.gif");
            Icon icon = new ImageIcon(image);
            loadingLabel.setIcon(icon);
            loadingLabel.setVisible(true);
            
            LoadingWorkTask task = new LoadingWorkTask(usernameText.getText());
            task.execute();
            
            isDownloaded_server = false;
            } catch (Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_loadUserBtnActionPerformed
    
    class LoadingThread extends Thread{
        @Override
        public void run(){
            synchronized(this){
                //serverManager.loadUserDiagnosticFileList("csdem098");
                notify();
            }
        }
    }
    
    private synchronized void loadingHandler(String username){
            /*
            System.out.println("Calling servermaneger loading");
            Thread t = new Thread(new Runnable(){
               public void run(){
                   serverManager.loadUserDiagnosticFileList(username);
                   displayFlag = true;
                   notifyAll();
               } 
            });
            t.start();
            //serverManager.loadUserDiagnosticFileList(username);
            */
            //synchronized(this){serverManager.loadUserDiagnosticFileList(username);}
    }
    
/*
    private synchronized void loadingDisplay(boolean display, String username){
        if(display){
            System.out.println("Display == true");
            while(!displayFlag){
                try{
                    wait();
                    System.out.println("Waiting...");
                } catch (Exception e){
                    e.printStackTrace();
                }
            }
            System.out.println("Set visible - true");
            loadingLabel.setVisible(true);
        } else {
            System.out.println("Display == false");
            while(displayFlag){
                try{
                    wait();
                    System.out.println("Waiting...");
                } catch (Exception e){
                    e.printStackTrace();
                }
            }
            System.out.println("Set visible - false");
            loadingLabel.setVisible(false);
            
            System.out.println("Handling combo box");
            //serverManager.loadUserDiagnosticFileList(username);
        }
        
        
        Thread t = new Thread(){
            public void run(){
                System.out.println("Starting thread for loading label");
                Runnable runLoading = new Runnable(){
                    public void run(){
                        if(flag)
                            loadingLabel.setVisible(true);
                        else
                            loadingLabel.setVisible(false);
                    }
                };
                try{
                    System.out.println("Setting loading label display");
                    javax.swing.SwingUtilities.invokeAndWait(runLoading);
                } catch (Exception e){
                    e.printStackTrace();
                }
            }
        };
        
        t.start();
        
    }
    */
    
    
    private void browseExtract1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseExtract1ActionPerformed
        // TODO add your handling code here:
        int returnVal = directoryChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File directory = directoryChooser.getSelectedFile();
            extractDirectory1.setText(directory.getAbsolutePath());
            serverManager.setReaderLocation(null, extractDirectory1.getText());
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find directory.");
        }
    }//GEN-LAST:event_browseExtract1ActionPerformed

    private void browseZip1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseZip1ActionPerformed
        // TODO add your handling code here:
        int returnVal = directoryChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            diagnosticFile_server = directoryChooser.getSelectedFile();
            if(!diagnosticFile_server.isDirectory()){
                javax.swing.JOptionPane.showMessageDialog(null, "Please choose a valid directory");
                return;
            }
            loadDirectory1.setText(diagnosticFile_server.getAbsolutePath());
            extractDirectory1.setText(diagnosticFile_server.getAbsolutePath() + "_ext");
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find directory.");
        }
    }//GEN-LAST:event_browseZip1ActionPerformed

    private void userDiagnosticsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userDiagnosticsComboBoxActionPerformed
        // TODO add your handling code here:
        if(userDiagnosticsComboBox.getSelectedItem() != null){
            serverManager.selectUserDiagnosticFile(userDiagnosticsComboBox.getSelectedItem().toString());
        }
    }//GEN-LAST:event_userDiagnosticsComboBoxActionPerformed

    private void logComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logComboBox1ActionPerformed
        if(logComboBox1.getSelectedItem() != null){
            serverManager.selectLogFile(logComboBox1.getSelectedItem().toString());

            // Set Status
            if(useImportServerBtn.isSelected()){
                logReady_server = true;
                updateStatus();
            }
        }        
    }//GEN-LAST:event_logComboBox1ActionPerformed
    
    private void downloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadBtnActionPerformed
        // TODO add your handling code here:
        String zipLocation = new String(loadDirectory1.getText() + "\\" + serverManager.getSelectedUserDiagnosticFile());
        File directory = new File(zipLocation);
        if(directory.exists() && directory.isFile()){
            int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The file already exists in the directory. Do you want to download and replace the existing " + serverManager.getSelectedUserDiagnosticFile() + " ?");
            if(reply == javax.swing.JOptionPane.YES_OPTION){
                if(serverManager.downloadDiagnosticFile(zipLocation)){
                    currentLoadedDiagnosticFileLabel.setText("Current loaded file: 【" + zipLocation + "】");
                    extractDirectory1.setText(zipLocation + "_ext");
                    extractProgressBar1.setValue(0);
                    isDownloaded_server = true;
                }
            }
        } else {
            if(serverManager.downloadDiagnosticFile(zipLocation)){
                currentLoadedDiagnosticFileLabel.setText("Current loaded file: 【" + zipLocation + "】");
                extractDirectory1.setText(zipLocation + "_ext");
                extractProgressBar1.setValue(0);
                isDownloaded_server = true;
            }
        }
    }//GEN-LAST:event_downloadBtnActionPerformed
    
    class ExtractWorkerTast1 extends SwingWorker<Boolean, Integer>{
        @Override
        public Boolean doInBackground(){
            // Initialize tws/ibg log combo box
            logComboBox1.setSelectedItem(null);
            logComboBox1.removeAllItems();
            isTwsLogAdded_server = false; // initialize
            isIbgLogAdded_server = false;
            publish(5);
            
            // Initialize settings file combo box
            settingsComboBox1.setSelectedItem(null);
            settingsComboBox1.removeAllItems();
            isTwsSettingsAdded_server = false;
            isIbgSettingsAdded_server = false;
            publish(10);
            
            // Initialize trade combo box
            tradeComboBox1.setSelectedItem(null);
            tradeComboBox1.removeAllItems();
            isTradeFileAdded_server = false;
            publish(15);
            
            // Initialize screenshot combo box
            if(useImportServerBtn.isSelected()){
                screenshotComboBox.setSelectedItem(null);
                screenshotComboBox.removeAllItems();
                isScreenshotAdded = false;
            }
            publish(20);
            
            serverManager.resetAllFileList();
            publish(30);
            
            serverManager.extract();
            isExtracted_server = true;
            publish(70);
            if(twsRadio1.isSelected()){
                // Populate and select log file for combo box
                handleLogComboBox_tws(LogReader.USESERVER);
                publish(75);
                
                // Populate and select settings file for combo box
                handleSettingsComboBox_tws(LogReader.USESERVER);
                publish(80);
                
                // Populate and select trade file for combo box
                handleTradeComboBox(LogReader.USESERVER);
                publish(85);
                
                // Populate and select screenshot for combo box
                handleScreenshotComboBox(LogReader.USESERVER);
                publish(90);
            } else if(ibgRadio1.isSelected()){
                // Populate and select log file for combo box
                handleLogComboBox_ibg(LogReader.USESERVER);
                publish(76);
                
                // Populate and select settings file for combo box
                handleSettingsComboBox_ibg(LogReader.USESERVER);
                publish(82);
                
                // Populate and select screenshot for combo box
                handleScreenshotComboBox(LogReader.USESERVER);
                publish(90);
            }
            
            if(autoClsCheck.isSelected()){
                textPaneList.get(Choices.ENV).setText(null);
                textPaneList.get(Choices.LOGINSEQ).setText(null);
                textPaneList.get(Choices.CONN).setText(null);
                textPaneList.get(Choices.SYSRES).setText(null);
                textPaneList.get(Choices.HTBP).setText(null);
                textPaneList.get(Choices.API).setText(null);
                textPaneList.get(Choices.MKTDATA).setText(null);
                textPaneList.get(Choices.ORDERSTRDS).setText(null);
            }
            publish(100);
            
            return true;            
        }
        
        public void process(List<Integer> chuncks){
            for(Integer progress: chuncks){
                extractProgressBar1.setValue(progress);
            }
        }
    }
    
    private void extractBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractBtn1ActionPerformed
        // TODO add your handling code here:
        // Trigger error if the file selected is not a .zip file
        //if(!localManager.checkValidZipLocation()){
        //    javax.swing.JOptionPane.showMessageDialog(null, "Please choose a valid .zip diagnostic file");
        //    return;
        //}

        File directory = new File(extractDirectory1.getText());
        if(directory.isDirectory()){ // If the output directory selected already exist
            int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The directory already exists. Do you want to clear the " + extractDirectory2.getText() + " folder first?");
            if(reply == javax.swing.JOptionPane.YES_OPTION){
                try{
                    FileUtils.cleanDirectory(directory); // Clear extract directory
                } catch (IOException e){
                    e.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(null, "Failed to clear directory");
                }

                extractDirectory1.setText(directory.toString());
                serverManager.setReaderLocation(null, extractDirectory1.getText());
                
                ExtractWorkerTast1 m_task = new ExtractWorkerTast1();
                m_task.execute();

                // Have main window show extracted directory
                if(useImportServerBtn.isSelected()){
                    this.setTitle("Log Analyzer - " + extractDirectory1.getText());
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Please choose a valid directory");
                extractDirectory1.setText(System.getProperty("user.home").toString() + "\\Temp");
                extractProgressBar1.setValue(0); /*Progress bar setting*/
            }
        }
        else {
            int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The directory " + extractDirectory1.getText() + " does not exist. Do you want to create it?");
            if(reply == javax.swing.JOptionPane.YES_OPTION){
                directory.mkdir();
                
                extractDirectory1.setText(directory.toString());
                serverManager.setReaderLocation(null, extractDirectory1.getText());

                ExtractWorkerTast1 m_task = new ExtractWorkerTast1();
                m_task.execute();

                // Have main window show extracted directory
                if(useImportServerBtn.isSelected()){
                    this.setTitle("Log Analyzer - " + extractDirectory1.getText());
                }
            }
            else {
                javax.swing.JOptionPane.showMessageDialog(null, "Failed to load directory. Please find a different directory.");
                extractDirectory1.setText(System.getProperty("user.home").toString() + "\\Temp");
                extractProgressBar1.setValue(0); /*Progress bar setting*/
            }
        }
    }//GEN-LAST:event_extractBtn1ActionPerformed

    private void twsRadio1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twsRadio1ActionPerformed
        
        serverManager.setIsTws(true);

        // Populate and select log file for combo box
        handleLogComboBox_tws(LogReader.USESERVER);

        // Populate and select settings file for combo box
        handleSettingsComboBox_tws(LogReader.USESERVER);

        // Populate and select trade file for combo box
        handleTradeComboBox(LogReader.USESERVER);

        // Populate and select screenshot for combo box
        handleScreenshotComboBox(LogReader.USESERVER);
    }//GEN-LAST:event_twsRadio1ActionPerformed

    private void ibgRadio1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ibgRadio1ActionPerformed
        
        serverManager.setIsTws(false);

        // Populate and select log file for combo box
        handleLogComboBox_ibg(LogReader.USESERVER);

        // Populate and select settings file for combo box
        handleSettingsComboBox_ibg(LogReader.USESERVER);
        
        // Populate and select trade file for combo box
        handleTradeComboBox(LogReader.USESERVER);

        // Populate and select screenshot for combo box
        handleScreenshotComboBox(LogReader.USESERVER);
    }//GEN-LAST:event_ibgRadio1ActionPerformed

    private void settingsComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsComboBox1ActionPerformed
        if(settingsComboBox1.getSelectedItem() != null){
            serverManager.selectSettingsFile(settingsComboBox1.getSelectedItem().toString(), false);

            // Set Status
            if(useImportServerBtn.isSelected()){
                settingsReady_server = true;
                updateStatus();
            }
        }
    }//GEN-LAST:event_settingsComboBox1ActionPerformed

    private void tradeComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradeComboBox1ActionPerformed
        if(tradeComboBox1.getSelectedItem() != null){
            serverManager.selectTradeFile(tradeComboBox1.getSelectedItem().toString());

            // Set Status
            if(useImportServerBtn.isSelected()){
                trdReady_server = true;
                updateStatus();
            }
        }
    }//GEN-LAST:event_tradeComboBox1ActionPerformed

    private void useImportServerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useImportServerBtnActionPerformed
        // Log section
        if(logComboBox1.getSelectedItem() != null){
            serverManager.selectLogFile(logComboBox1.getSelectedItem().toString());
            // Set Status
            logReady_server = true;
            updateStatus();
        } else {
            serverManager.selectLogFile(null);
            // Set Status
            logReady_server = false;
            updateStatus();
        }
        
        // Settings section
        if(settingsComboBox1.getSelectedItem() != null){
            serverManager.selectSettingsFile(settingsComboBox1.getSelectedItem().toString(), false);
            // Set Status
            settingsReady_server = true;
            updateStatus();
        } else {
            serverManager.selectSettingsFile(null, false);
            // Set Status
            settingsReady_server = false;
            updateStatus();
        }
        
        // Trading section
        if(tradeComboBox1.getSelectedItem() != null){
            serverManager.selectTradeFile(tradeComboBox1.getSelectedItem().toString());
            // Set Status
            trdReady_server = true;
            updateStatus();
        } else {
            serverManager.selectTradeFile(null);
            // Set Status
            trdReady_server = false;
            updateStatus();
        }
        
        // Screenshot section
        // Reload screenshot for server manager
        screenshotComboBox.setSelectedItem(null);
        screenshotComboBox.removeAllItems();
        isScreenshotAdded = false;
                
        handleScreenshotComboBox(LogReader.USESERVER);
        
        if(screenshotComboBox.getSelectedItem() != null){
            serverManager.selectScreenshot(screenshotComboBox.getSelectedItem().toString());
            // Set Status
            screenshotReady_server = true;
            updateStatus();
        } else {
            serverManager.selectScreenshot(null);
            // Set Status
            screenshotReady_server = false;
            updateStatus();
        }
        
        // Have main window show extracted directory
        if(isExtracted_local){
            this.setTitle("Log Analyzer - " + extractDirectory1.getText());
        }
    }//GEN-LAST:event_useImportServerBtnActionPerformed

    private void regExTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_regExTextFocusGained
        if(regExText.getText().equals("RegEx Search...")){
            regExText.setText("");
        } else {
            regExText.selectAll();
        }
    }//GEN-LAST:event_regExTextFocusGained

    private void usernameTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameTextKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            loadUserBtnActionPerformed(null);
        }
    }//GEN-LAST:event_usernameTextKeyPressed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        diagnosticFile_server = null;
        isDownloaded_server = false;
        isExtracted_server = false; //determine if to use extracted log or manual selected log
        
        isTwsLogAdded_server = false;
        isIbgLogAdded_server = false;
        isTwsSettingsAdded_server = false;
        isIbgSettingsAdded_server = false;
        isTradeFileAdded_server = false;
        
        logReady_server = false;
        settingsReady_server = false;
        trdReady_server = false;
        screenshotReady_server = false;
        
        diagnosticFile_local = null;
        isExtracted_local = false; //determine if to use extracted log or manual selected log
        
        isTwsLogAdded_local = false;
        isIbgLogAdded_local = false;
        isTwsSettingsAdded_local = false;
        isIbgSettingsAdded_local = false;
        isTradeFileAdded_local = false;
        
        isScreenshotAdded = false;
        
        logReady_local = false;
        settingsReady_local = false;
        trdReady_local = false;
        screenshotReady_local = false;
        
        usernameText.setText("Enter Username...");
        userDiagnosticsComboBox.removeAllItems();
        loadDirectory1.setText(System.getProperty("user.home").toString() + "\\Temp");
        currentLoadedDiagnosticFileLabel.setText("Current loaded file:");
        extractDirectory1.setText(System.getProperty("user.home").toString() + "\\Temp_ext");
        extractProgressBar1.setValue(0);
        logComboBox1.removeAllItems();
        settingsComboBox1.removeAllItems();
        tradeComboBox1.removeAllItems();
        twsRadio1.setSelected(true);
        
        loadDirectory2.setText(System.getProperty("user.home").toString() + "\\Temp");
        extractDirectory2.setText(System.getProperty("user.home").toString() + "\\Temp_ext");
        extractProgressBar2.setValue(0);
        extractProgressBar2.setValue(0);
        logComboBox2.removeAllItems();
        settingsComboBox2.removeAllItems();
        tradeComboBox2.removeAllItems();
        twsRadio2.setSelected(true);
        
        updateStatus();
        
        localManager.reset();
        serverManager.reset();
    }//GEN-LAST:event_resetBtnActionPerformed

    private void usernameTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usernameTextMouseClicked
        if(usernameText.getText().equals("Enter Username...")){
            usernameText.setText("");
        } else {
            usernameText.selectAll();
        }
    }//GEN-LAST:event_usernameTextMouseClicked
    
    private void handleUserDiagnosticFileBox(){
        userDiagnosticsComboBox.removeAllItems();
        String[] list = serverManager.getUserDiagnosticFileList();
        for(String s: list){
            userDiagnosticsComboBox.addItem(s);
        }
        userDiagnosticsComboBox.setSelectedItem(userDiagnosticsComboBox.getItemAt(0));
        if(userDiagnosticsComboBox.getSelectedItem() != null){
            serverManager.selectUserDiagnosticFile(userDiagnosticsComboBox.getSelectedItem().toString());
        }
    }
    
    private void customInitComponents(){
        java.awt.Dimension dim = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, 0);
        
        loadingLabel.setVisible(false);
        
        textPaneList.put(Choices.ENV, envTextPane);
        textPaneList.put(Choices.CONN, connTextPane);
        textPaneList.put(Choices.LOGINSEQ, loginSeqTextPane);
        textPaneList.put(Choices.SYSRES, sysResTextPane);
        textPaneList.put(Choices.HTBP, htbpTextPane);
        textPaneList.put(Choices.API, apiTextPane);
        textPaneList.put(Choices.MKTDATA, mktDataTextPane);
        textPaneList.put(Choices.ORDERSTRDS, ordTrdTextPane);
    }
    
    private void handleLogComboBox_tws(int method){
        if(method == LogReader.USESERVER){
            if(isExtracted_server && !isTwsLogAdded_server){
                if(isIbgLogAdded_server){
                    logComboBox1.removeAllItems();
                    isIbgLogAdded_server = false;
                }
                String[] list = serverManager.getLogFileListNames();
                if(list == null){
                    logComboBox1.setSelectedItem(null);
                    isTwsLogAdded_server = true;
                    if(useImportServerBtn.isSelected()){
                        serverManager.selectLogFile(null);
                        logReady_server = false;
                        updateStatus();
                    }
                    return;
                }
                
                for(String s: list){
                    logComboBox1.addItem(s);
                }
                isTwsLogAdded_server = true;
            }
            logComboBox1.setSelectedItem(serverManager.getTodayLogFileName());
            if(logComboBox1.getSelectedItem() != null && useImportServerBtn.isSelected()){
                serverManager.selectLogFile(logComboBox1.getSelectedItem().toString());
                logReady_server = true;
                updateStatus();
            } else {
                logReady_server = false;
                updateStatus();
            }
        } else if (method == LogReader.USELOCAL){
            if(isExtracted_local && !isTwsLogAdded_local){
                if(isIbgLogAdded_local){
                    logComboBox2.removeAllItems();
                    isIbgLogAdded_local = false;
                }
                String[] list = localManager.getLogFileListNames();
                if(list == null){
                    logComboBox2.setSelectedItem(null);
                    isTwsLogAdded_local = true;
                    if(useImportLocalBtn.isSelected()){
                        localManager.selectLogFile(null, false);
                        logReady_local = false;
                        updateStatus();
                    }
                    return;
                }
                
                for(String s: list){
                    logComboBox2.addItem(s);
                }
                isTwsLogAdded_local = true;
            }
            logComboBox2.setSelectedItem(localManager.getTodayLogFileName());
            if(logComboBox2.getSelectedItem() != null && useImportLocalBtn.isSelected()){
                localManager.selectLogFile(logComboBox2.getSelectedItem().toString(), false);
                logReady_local = true;
                updateStatus();
            } else {
                logReady_local = false;
                updateStatus();
            }
        } else {
            return;
        }
    }
    
    private void handleSettingsComboBox_tws(int method){
        if(method == LogReader.USESERVER){
            if(isExtracted_server && !isTwsSettingsAdded_server){
                if(isIbgSettingsAdded_server){
                    settingsComboBox1.removeAllItems();
                    isIbgSettingsAdded_server = false;
                }
                String[] list = serverManager.getSettingsFileListNames();
                if(list == null){
                    settingsComboBox1.setSelectedItem(null);
                    isTwsSettingsAdded_server = true;
                    if(useImportServerBtn.isSelected()){
                        serverManager.selectSettingsFile(null, false);
                        settingsReady_server = false;
                        updateStatus();
                    }
                    return;
                }
                
                for(String s: list){
                    settingsComboBox1.addItem(s);
                }
                isTwsSettingsAdded_server = true;
            }
            settingsComboBox1.setSelectedItem(serverManager.getTodaySettingsFileName());
            if(settingsComboBox1.getSelectedItem() != null && useImportServerBtn.isSelected()){
                serverManager.selectSettingsFile(settingsComboBox1.getSelectedItem().toString(), false);
                settingsReady_server = true;
                updateStatus();
            } else {
                settingsReady_server = false;
                updateStatus();
            }
        } else if (method == LogReader.USELOCAL){
            if(isExtracted_local && !isTwsSettingsAdded_local){
                if(isIbgSettingsAdded_local){
                    settingsComboBox2.removeAllItems();
                    isIbgSettingsAdded_local = false;
                }
                String[] list = localManager.getSettingsFileListNames();
                if(list == null){
                    settingsComboBox2.setSelectedItem(null);
                    isTwsSettingsAdded_local = true;
                    if(useImportLocalBtn.isSelected()){
                        localManager.selectSettingsFile(null, false);
                        settingsReady_local = false;
                        updateStatus();
                    }
                    return;
                }
                
                for(String s: list){
                    settingsComboBox2.addItem(s);
                }
                isTwsSettingsAdded_local = true;
            }
            settingsComboBox2.setSelectedItem(localManager.getTodaySettingsFileName());
            if(settingsComboBox2.getSelectedItem() != null && useImportLocalBtn.isSelected()){
                localManager.selectSettingsFile(settingsComboBox2.getSelectedItem().toString(), false);
                settingsReady_local = true;
                updateStatus();
            } else {
                settingsReady_local = false;
                updateStatus();
            }
        } else {
            return;
        }
    }
    
    private void handleLogComboBox_ibg(int method){
        if(method == LogReader.USESERVER){
            if(isExtracted_server && !isIbgLogAdded_server){
                if(isTwsLogAdded_server){
                    logComboBox1.removeAllItems();
                    isTwsLogAdded_server = false;
                }
                String[] list = serverManager.getLogFileListNames();
                if(list == null){
                    logComboBox1.setSelectedItem(null);
                    isIbgLogAdded_server = true;
                    if(useImportServerBtn.isSelected()){
                        serverManager.selectLogFile(null);
                        logReady_server = false;
                        updateStatus();
                    }
                    return;
                }
                
                for(String s: list){
                    logComboBox1.addItem(s);
                }
                isIbgLogAdded_server = true;
            }
            logComboBox1.setSelectedItem(serverManager.getTodayLogFileName());
            if(logComboBox1.getSelectedItem() != null && useImportServerBtn.isSelected()){
                serverManager.selectLogFile(logComboBox1.getSelectedItem().toString());
                logReady_server = true;
                updateStatus();
            } else {
                logReady_server = false;
                updateStatus();
            }
        } else if (method == LogReader.USELOCAL){
            if(isExtracted_local && !isIbgLogAdded_local){
                if(isTwsLogAdded_local){
                    logComboBox2.removeAllItems();
                    isTwsLogAdded_local = false;
                }
                String[] list = localManager.getLogFileListNames();
                if(list == null){
                    logComboBox2.setSelectedItem(null);
                    isIbgLogAdded_local = true;
                    if(useImportLocalBtn.isSelected()){
                        localManager.selectLogFile(null, false);
                        logReady_local = false;
                        updateStatus();
                    }
                    return;
                }
                
                for(String s: list){
                    logComboBox2.addItem(s);
                }
                isIbgLogAdded_local = true;
            }
            logComboBox2.setSelectedItem(localManager.getTodayLogFileName());
            if(logComboBox2.getSelectedItem() != null && useImportLocalBtn.isSelected()){
                localManager.selectLogFile(logComboBox2.getSelectedItem().toString(), false);
                logReady_local = true;
                updateStatus();
            } else {
                logReady_local = false;
                updateStatus();
            }
        } else {
            return;
        }
    }
    
    private void handleSettingsComboBox_ibg(int method){
        if(method == LogReader.USESERVER){
            if(isExtracted_server && !isIbgSettingsAdded_server){
                if(isTwsSettingsAdded_server){
                    settingsComboBox1.removeAllItems();
                    isTwsSettingsAdded_server = false;
                }
                String[] list = serverManager.getSettingsFileListNames();
                if(list == null){
                    settingsComboBox1.setSelectedItem(null);
                    isIbgSettingsAdded_server = true;
                    if(useImportServerBtn.isSelected()){
                        serverManager.selectSettingsFile(null, false);
                        settingsReady_server = false;
                        updateStatus();
                    }
                    return;
                }
                
                for(String s: list){
                    settingsComboBox1.addItem(s);
                }
                isIbgSettingsAdded_server = true;
            }
            settingsComboBox1.setSelectedItem(serverManager.getTodaySettingsFileName());
            if(settingsComboBox1.getSelectedItem() != null && useImportServerBtn.isSelected()){
                serverManager.selectSettingsFile(settingsComboBox1.getSelectedItem().toString(), false);
                settingsReady_server = true;
                updateStatus();
            } else {
                settingsReady_server = false;
                updateStatus();
            }
        } else if (method == LogReader.USELOCAL){
            if(isExtracted_local && !isIbgSettingsAdded_local){
                if(isTwsSettingsAdded_local){
                    settingsComboBox2.removeAllItems();
                    isTwsSettingsAdded_local = false;
                }
                String[] list = localManager.getSettingsFileListNames();
                if(list == null){
                    settingsComboBox2.setSelectedItem(null);
                    isIbgSettingsAdded_local = true;
                    if(useImportLocalBtn.isSelected()){
                        localManager.selectSettingsFile(null, false);
                        settingsReady_local = false;
                        updateStatus();
                    }
                    return;
                }
                
                for(String s: list){
                    settingsComboBox2.addItem(s);
                }
                isIbgSettingsAdded_local = true;
            }
            settingsComboBox2.setSelectedItem(localManager.getTodaySettingsFileName());
            if(settingsComboBox2.getSelectedItem() != null && useImportLocalBtn.isSelected()){
                localManager.selectSettingsFile(settingsComboBox2.getSelectedItem().toString(), false);
                settingsReady_local = true;
                updateStatus();
            } else {
                settingsReady_local = false;
                updateStatus();
            }
        } else {
            return;
        }
    }
    
    private void handleTradeComboBox(int method){
        if(method == LogReader.USESERVER){
            if(!serverManager.isTws()){
                tradeComboBox1.removeAllItems();
                isTradeFileAdded_server = false;
                return;
            }
            if(isExtracted_server && !isTradeFileAdded_server){
                String[] list = serverManager.getTradeFileListNames();
                if(list == null){
                    tradeComboBox1.setSelectedItem(null);
                    isTradeFileAdded_server = true;
                    if(useImportServerBtn.isSelected()){
                        serverManager.selectTradeFile(null);
                        trdReady_server = false;
                        updateStatus();
                    }
                    return;
                }
                
                for(String s: list){
                    tradeComboBox1.addItem(s);
                }
                isTradeFileAdded_server = true;
            }
            tradeComboBox1.setSelectedItem(serverManager.getTodayTradeFileName());
            if(tradeComboBox1.getSelectedItem() != null && useImportServerBtn.isSelected()){
                serverManager.selectTradeFile(tradeComboBox1.getSelectedItem().toString());
                trdReady_server = true;
                updateStatus();
            } else {
                trdReady_server = false;
                updateStatus();
            }
        } else if (method == LogReader.USELOCAL){
            if(!localManager.isTws()){
                tradeComboBox2.removeAllItems();
                isTradeFileAdded_local = false;
                return;
            }
            if(isExtracted_local && !isTradeFileAdded_local){
                String[] list = localManager.getTradeFileListNames();
                if(list == null){
                    tradeComboBox2.setSelectedItem(null);
                    isTradeFileAdded_local = true;
                    if(useImportLocalBtn.isSelected()){
                        localManager.selectTradeFile(null);
                        trdReady_local = false;
                        updateStatus();
                    }
                    return;
                }
                
                for(String s: list){
                    tradeComboBox2.addItem(s);
                }
                isTradeFileAdded_local = true;
            }
            tradeComboBox2.setSelectedItem(localManager.getTodayTradeFileName());
            if(tradeComboBox2.getSelectedItem() != null && useImportLocalBtn.isSelected()){
                localManager.selectTradeFile(tradeComboBox2.getSelectedItem().toString());
                trdReady_local = true;
                updateStatus();
            } else {
                trdReady_local = false;
                updateStatus();
            }
        } else {
            return;
        }
    }
    
    private void handleScreenshotComboBox(int method){
        if(method == LogReader.USESERVER && useImportServerBtn.isSelected()){
            if(isExtracted_server == true){
                screenshotComboBox.removeAllItems();
                String[] list = serverManager.getScreenshotListNames();
                if(list == null){
                    screenshotComboBox.setSelectedItem(null);
                    isScreenshotAdded = true;
                    if(useImportServerBtn.isSelected()){
                        serverManager.selectScreenshot(null);
                        screenshotReady_server = false;
                        updateStatus();
                    }
                    return;
                }
                
                for(String s: list){
                    screenshotComboBox.addItem(s);
                }
                isScreenshotAdded = true;
            }
            screenshotComboBox.setSelectedItem(serverManager.getFirstScreenshotName());
            if(screenshotComboBox.getSelectedItem() != null && useImportServerBtn.isSelected()){
                serverManager.selectScreenshot(screenshotComboBox.getSelectedItem().toString());
                screenshotReady_server = true;
                updateStatus();
            } else {
                screenshotReady_server = false;
                updateStatus();
            }
        } else if (method == LogReader.USELOCAL && useImportLocalBtn.isSelected()){
            if(isExtracted_local == true){
                screenshotComboBox.removeAllItems();
                String[] list = localManager.getScreenshotListNames();
                if(list == null){
                    screenshotComboBox.setSelectedItem(null);
                    isScreenshotAdded = true;
                    if(useImportLocalBtn.isSelected()){
                        localManager.selectScreenshot(null);
                        screenshotReady_local = false;
                        updateStatus();
                    }
                    return;
                }
                
                for(String s: list){
                    screenshotComboBox.addItem(s);
                }
                isScreenshotAdded = true;
            }
            screenshotComboBox.setSelectedItem(localManager.getFirstScreenshotName());
            if(screenshotComboBox.getSelectedItem() != null && useImportLocalBtn.isSelected()){
                localManager.selectScreenshot(screenshotComboBox.getSelectedItem().toString());
                screenshotReady_local = true;
                updateStatus();
            } else {
                screenshotReady_local = false;
                updateStatus();
            }
        } else if(useManualFileBtn.isSelected()){
            screenshotComboBox.removeAllItems();
        }
    }
    
    private void updateStatus(){
        if(useImportServerBtn.isSelected()){
            //Log File Status
            if(logReady_server){
                logFileStatus.setText("Log File - Ready");
                logFileStatus.setForeground(Color.GREEN.darker());
                analyzeBtn.setEnabled(true);
            } else {
                logFileStatus.setText("Log File - Not Selected");
                logFileStatus.setForeground(Color.RED);
                analyzeBtn.setEnabled(false);
            }
            
            // Settings File Status
            if(settingsReady_server){
                settingsFileStatus.setText("Settings File - Ready");
                settingsFileStatus.setForeground(Color.GREEN.darker());
                serverManager.setIncludeXml(true);
                includeXmlCheck.setSelected(true);
                includeXmlCheck.setEnabled(true);
            } else {
                settingsFileStatus.setText("Settings File - Not Selected");
                settingsFileStatus.setForeground(Color.RED);
                serverManager.setIncludeXml(false);
                includeXmlCheck.setSelected(false);
                includeXmlCheck.setEnabled(false);
            }
            
            // Trade File Status
            if(trdReady_server && serverManager.isTws()){
                tradeFileStatus.setText("Trade File - Ready");
                tradeFileStatus.setForeground(Color.GREEN.darker());
                // Trade file is not included in analysis by default
                includeTrdFileCheck.setEnabled(true);
            } else if (!serverManager.isTws()){
                tradeFileStatus.setText("Trade File - Not used for IB Gateway");
                tradeFileStatus.setForeground(Color.RED);
                includeTrdFileCheck.setEnabled(false);
            } else if (!trdReady_server) {
                tradeFileStatus.setText("Trade File - Not Selected");
                tradeFileStatus.setForeground(Color.RED);
                includeTrdFileCheck.setEnabled(false);
            }
            
            // Screenshot Status
            if(screenshotReady_server){
                screenshotStatus.setText("Screenshot - Ready");
                screenshotStatus.setForeground(Color.GREEN.darker());
                screenshotComboBox.setEnabled(true);
                openScreenshotBtn.setEnabled(true);
            } else {
                screenshotStatus.setText("Screenshot - No screenshot is found");
                screenshotStatus.setForeground(Color.RED);
                screenshotComboBox.setEnabled(true);
                openScreenshotBtn.setEnabled(true);
            }
        } else if (useImportLocalBtn.isSelected()){
            //Log File Status
            if(logReady_local){
                logFileStatus.setText("Log File - Ready");
                logFileStatus.setForeground(Color.GREEN.darker());
                analyzeBtn.setEnabled(true);
            } else {
                logFileStatus.setText("Log File - Not Selected");
                logFileStatus.setForeground(Color.RED);
                analyzeBtn.setEnabled(false);
            }
            
            // Settings File Status
            if(settingsReady_local){
                settingsFileStatus.setText("Settings File - Ready");
                settingsFileStatus.setForeground(Color.GREEN.darker());
                localManager.setIncludeXml(true);
                includeXmlCheck.setSelected(true);
                includeXmlCheck.setEnabled(true);
            } else {
                settingsFileStatus.setText("Settings File - Not Selected");
                settingsFileStatus.setForeground(Color.RED);
                localManager.setIncludeXml(false);
                includeXmlCheck.setSelected(false);
                includeXmlCheck.setEnabled(false);
            }
            
            // Trade File Status
            if(trdReady_local && localManager.isTws()){
                tradeFileStatus.setText("Trade File - Ready");
                tradeFileStatus.setForeground(Color.GREEN.darker());
                // Trade file is not included in analysis by default
                includeTrdFileCheck.setEnabled(true);
            } else if (!localManager.isTws()){
                tradeFileStatus.setText("Trade File - Not used for IB Gateway");
                tradeFileStatus.setForeground(Color.RED);
                includeTrdFileCheck.setEnabled(false);
            } else if (!trdReady_local) {
                tradeFileStatus.setText("Trade File - Not Selected");
                tradeFileStatus.setForeground(Color.RED);
                includeTrdFileCheck.setEnabled(false);
            }
            
            // Screenshot Status
            if(screenshotReady_local){
                screenshotStatus.setText("Screenshot - Ready");
                screenshotStatus.setForeground(Color.GREEN.darker());
                screenshotComboBox.setEnabled(true);
                openScreenshotBtn.setEnabled(true);
            } else {
                screenshotStatus.setText("Screenshot - No screenshot is found");
                screenshotStatus.setForeground(Color.RED);
                screenshotComboBox.setEnabled(true);
                openScreenshotBtn.setEnabled(true);
            }
        } else if (useManualFileBtn.isSelected()){
            // Log File Status
            if(logReady_local){
                logFileStatus.setText("Log File - Ready");
                logFileStatus.setForeground(Color.GREEN.darker());
                analyzeBtn.setEnabled(true);
            } else {
                logFileStatus.setText("Log File - Not Selected");
                logFileStatus.setForeground(Color.RED);
                analyzeBtn.setEnabled(false);
            }
            
            // Settings File Status
            if(settingsReady_local){
                settingsFileStatus.setText("Settings File - Ready");
                settingsFileStatus.setForeground(Color.GREEN.darker());
                localManager.setIncludeXml(true);
                includeXmlCheck.setSelected(true);
                includeXmlCheck.setEnabled(true);
            } else {
                settingsFileStatus.setText("Settings File - Not Selected");
                settingsFileStatus.setForeground(Color.RED);
                localManager.setIncludeXml(false);
                includeXmlCheck.setSelected(false);
                includeXmlCheck.setEnabled(false);
            }
            
            // Trade File Status
            tradeFileStatus.setText("Trade File - Not used when selecting files manually");
            tradeFileStatus.setForeground(Color.RED);
            includeTrdFileCheck.setEnabled(false);
            
            // Screenshot Status
            screenshotStatus.setText("Screenshot - Not used when selecting files manually");
            screenshotStatus.setForeground(Color.RED);
            screenshotComboBox.setEnabled(false);
            openScreenshotBtn.setEnabled(false);
        }
    }
    
    public static void addStylesToDocument(StyledDocument doc){
        Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
        
        Style regular = doc.addStyle("regular", def);
        //StyleConstants.setFontFamily(def, "SabsSerif");
        
        Style s = doc.addStyle("italic", regular);
        StyleConstants.setItalic(s, true);
        
        s = doc.addStyle("italicBold", regular);
        StyleConstants.setItalic(s, true);
        StyleConstants.setBold(s, true);
        
        s = doc.addStyle("blackBold", regular);
        StyleConstants.setBold(s, true);
        
        s = doc.addStyle("blackBoldCentered", regular);
        StyleConstants.setBold(s, true);
        StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);
        
        s = doc.addStyle("purpleBold", regular);
        StyleConstants.setForeground(s, new Color(255,0,255).darker().darker());
        StyleConstants.setBold(s, true);
        
        s = doc.addStyle("blue", regular);
        StyleConstants.setForeground(s, Color.blue.brighter().brighter());
        
        s = doc.addStyle("gray", regular);
        StyleConstants.setForeground(s, Color.gray);
        
        s = doc.addStyle("green", regular);
        StyleConstants.setForeground(s, Color.green.darker());
        
        s = doc.addStyle("darkGreen", regular);
        StyleConstants.setForeground(s, Color.green.darker().darker());
        
        s = doc.addStyle("orange", regular);
        StyleConstants.setForeground(s, Color.orange.darker());
        
        s = doc.addStyle("red", regular);
        StyleConstants.setForeground(s, Color.red);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalyzerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalyzerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalyzerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalyzerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AnalyzerGUI mainFrame = new AnalyzerGUI();
                
                mainFrame.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane MainPane;
    private javax.swing.JButton analyzeAPIBtn;
    private javax.swing.JButton analyzeAllBtn;
    private javax.swing.JButton analyzeBtn;
    private javax.swing.JButton analyzeConnBtn;
    private javax.swing.JButton analyzeEnvBtn;
    private javax.swing.JButton analyzeHtbpBtn;
    private javax.swing.JButton analyzeLoginSeqBtn;
    private javax.swing.JButton analyzeMktDataBtn;
    private javax.swing.JButton analyzeOrdTrdBtn;
    private javax.swing.JButton analyzeSysResBtn;
    private javax.swing.JCheckBox autoClsCheck;
    private javax.swing.JButton browseExtract1;
    private javax.swing.JButton browseExtract2;
    private javax.swing.JButton browseLogManual;
    private javax.swing.JButton browseSettingsManual;
    private javax.swing.JButton browseZip1;
    private javax.swing.JButton browseZip2;
    private javax.swing.JLabel chooseDiagnosticFileLabel;
    private javax.swing.JButton clearAllBtn;
    private javax.swing.JPanel configurePane;
    private javax.swing.JPanel configurePanel;
    private javax.swing.JLabel currentLoadedDiagnosticFileLabel;
    private javax.swing.JCheckBox deepAnalysisCheck;
    private javax.swing.JFileChooser directoryChooser;
    private javax.swing.JButton downloadBtn;
    private javax.swing.JPanel downloadDiagnosticPane;
    private javax.swing.JButton extractBtn1;
    private javax.swing.JButton extractBtn2;
    private javax.swing.JTextField extractDirectory1;
    private javax.swing.JTextField extractDirectory2;
    private javax.swing.JLabel extractLabel1;
    private javax.swing.JLabel extractLabel2;
    private javax.swing.JProgressBar extractProgressBar1;
    private javax.swing.JProgressBar extractProgressBar2;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JRadioButton ibgRadio1;
    private javax.swing.JRadioButton ibgRadio2;
    private javax.swing.JPanel importDiagnosticPane;
    private javax.swing.JLabel importLabel;
    private javax.swing.ButtonGroup importMethodGroup;
    private javax.swing.JCheckBox includeTrdFileCheck;
    private javax.swing.JCheckBox includeXmlCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField loadDirectory1;
    private javax.swing.JTextField loadDirectory2;
    private javax.swing.JButton loadUserBtn;
    private javax.swing.JLabel loadingLabel;
    private javax.swing.JComboBox<String> logComboBox1;
    private javax.swing.JComboBox<String> logComboBox2;
    private javax.swing.JTextField logDirectoryManual;
    private javax.swing.JLabel logFileStatus;
    private javax.swing.JPanel manualImportPane;
    private javax.swing.JLabel manualSettingsLabel;
    private javax.swing.JCheckBox matchCaseCheck;
    private javax.swing.JButton openLogFileBtn;
    private javax.swing.JButton openScreenshotBtn;
    private javax.swing.JButton regExSearchBtn;
    private javax.swing.JTextField regExText;
    private javax.swing.JButton resetBtn;
    private javax.swing.JComboBox<String> screenshotComboBox;
    private javax.swing.JLabel screenshotStatus;
    private javax.swing.JComboBox<String> settingsComboBox1;
    private javax.swing.JComboBox<String> settingsComboBox2;
    private javax.swing.JTextField settingsDirectoryManual;
    private javax.swing.JLabel settingsFileStatus;
    private javax.swing.JLabel settingsLabel1;
    private javax.swing.JLabel settingsLabel2;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JPanel textMainPane;
    private javax.swing.JComboBox<String> tradeComboBox1;
    private javax.swing.JComboBox<String> tradeComboBox2;
    private javax.swing.JLabel tradeFileStatus;
    private javax.swing.JLabel tradeLabel1;
    private javax.swing.JLabel tradeLabel2;
    private javax.swing.ButtonGroup twsIbgGroup1;
    private javax.swing.ButtonGroup twsIbgGroup2;
    private javax.swing.JLabel twsIbgLogLabel1;
    private javax.swing.JLabel twsIbgLogLabel2;
    private javax.swing.JPanel twsLogFilterPanel;
    private javax.swing.JRadioButton twsRadio1;
    private javax.swing.JRadioButton twsRadio2;
    private javax.swing.JRadioButton useImportLocalBtn;
    private javax.swing.JRadioButton useImportServerBtn;
    private javax.swing.JRadioButton useManualFileBtn;
    private javax.swing.JComboBox<String> userDiagnosticsComboBox;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameText;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JPanel logDisplayPane1;
    private javax.swing.JPanel logDisplayPane2;
    private javax.swing.JPanel logDisplayPane3;
    private javax.swing.JTextPane envTextPane;
    private javax.swing.JTextPane loginSeqTextPane;
    private javax.swing.JTextPane connTextPane;
    private javax.swing.JTextPane sysResTextPane;
    private javax.swing.JTextPane htbpTextPane;
    private javax.swing.JTextPane apiTextPane;
    private javax.swing.JTextPane mktDataTextPane;
    private javax.swing.JTextPane ordTrdTextPane;
    
    private javax.swing.JScrollPane envTextScrollPane;
    private javax.swing.JScrollPane loginSeqTextScrollPane;
    private javax.swing.JScrollPane connTextScrollPane;
    private javax.swing.JScrollPane sysResTextScrollPane;
    private javax.swing.JScrollPane htbpTextScrollPane;
    private javax.swing.JScrollPane apiTextScrollPane;
    private javax.swing.JScrollPane mktDataTextScrollPane;
    private javax.swing.JScrollPane ordTrdTextScrollPane;
}
