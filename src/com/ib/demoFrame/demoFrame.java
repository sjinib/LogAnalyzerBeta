/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package com.ib.demoFrame;

import com.ib.manager.*;
import java.awt.Color;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import org.apache.commons.io.FileUtils;
import java.util.HashMap;
import com.ib.parser.Choices;
import javax.swing.text.*;

/**
 *
 * @author sitengjin
 */
public class demoFrame extends javax.swing.JFrame {
    private LogManager manager = new LogManager();
    private File diagnosticFile;
    private boolean isExtracted = false; //determine if to use extracted log or manual selected log
    
    private boolean isTwsLogAdded = false;
    private boolean isIbgLogAdded = false;
    private boolean isTwsSettingsAdded = false;
    private boolean isIbgSettingsAdded = false;
    
    private boolean useExtractedZip = true;
    
    private boolean logReady = false;
    private boolean settingsReady = false;
    
    private HashMap<String, javax.swing.JTextPane> textPaneList = new HashMap<String, javax.swing.JTextPane>();
    
    /**
     * Creates new form demoFrame
     */
    public demoFrame() {
        initComponents();
        customInitComponents();       
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        twsIbgGroup = new javax.swing.ButtonGroup();
        extractManualGroup = new javax.swing.ButtonGroup();
        directoryChooser = new javax.swing.JFileChooser();
        MainPane = new javax.swing.JTabbedPane();
        configurePanel = new javax.swing.JPanel();
        configurePane = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        loadDirectory = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        extractDirectory = new javax.swing.JTextField();
        extractBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        logComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        settingsComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        logDirectoryManual = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        browseSettingsManual = new javax.swing.JButton();
        browseZip = new javax.swing.JButton();
        browseExtract = new javax.swing.JButton();
        twsRadio = new javax.swing.JRadioButton();
        ibgRadio = new javax.swing.JRadioButton();
        extractProgressBar = new javax.swing.JProgressBar();
        jLabel10 = new javax.swing.JLabel();
        browseLogManual = new javax.swing.JButton();
        settingsDirectoryManual = new javax.swing.JTextField();
        statusPanel = new javax.swing.JPanel();
        useExtractFileBtn = new javax.swing.JRadioButton();
        useManualFileBtn = new javax.swing.JRadioButton();
        statusLabel = new javax.swing.JLabel();
        logFileStatus = new javax.swing.JLabel();
        settingsFileStatus = new javax.swing.JLabel();
        analyzeBtn = new javax.swing.JButton();
        twsLogFilterPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        analyzeAllBtn = new javax.swing.JButton();
        analyzeEnvBtn = new javax.swing.JButton();
        analyzeLoginSeqBtn = new javax.swing.JButton();
        analyzeSysResBtn = new javax.swing.JButton();
        analyzeMktDataBtn = new javax.swing.JButton();
        analyzeConnBtn = new javax.swing.JButton();
        analyzeHtbpBtn = new javax.swing.JButton();
        analyzeAPIBtn = new javax.swing.JButton();
        analyzeOrdTrdBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        autoClsCheck = new javax.swing.JCheckBox();
        deepAnalysisCheck = new javax.swing.JCheckBox();
        includeXmlCheck = new javax.swing.JCheckBox();
        includeTrdFileCheck = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        logDisplayPane1 = new javax.swing.JPanel();
        logDisplayPane2 = new javax.swing.JPanel();
        logDisplayPane3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Log Analyzer");
        setName("mainPanel"); // NOI18N
        setPreferredSize(new java.awt.Dimension(java.awt.Toolkit.getDefaultToolkit().getScreenSize().width-50, java.awt.Toolkit.getDefaultToolkit().getScreenSize().height-50));
        setSize(new java.awt.Dimension(0, 0));

        MainPane.setName(""); // NOI18N
        MainPane.setPreferredSize(new java.awt.Dimension(484, 484));

        configurePanel.setName(""); // NOI18N

        configurePane.setBorder(javax.swing.BorderFactory.createTitledBorder("Log File Configuration"));

        jLabel2.setText("Import downloaded diagnostic zip file:");

        loadDirectory.setText(System.getProperty("user.home").toString());
        loadDirectory.setMaximumSize(new java.awt.Dimension(300, 20));
        loadDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDirectoryActionPerformed(evt);
            }
        });

        jLabel3.setText("Extract zip file to location:");

        extractDirectory.setText(System.getProperty("user.home").toString() + "\\Temp");
        extractDirectory.setToolTipText("");
        extractDirectory.setMaximumSize(new java.awt.Dimension(300, 20));
        extractDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractDirectoryActionPerformed(evt);
            }
        });

        extractBtn.setText("Extract");
        extractBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("TWS/IB Gateway log:");

        logComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Settings File:");

        settingsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Or");

        jLabel7.setText("Manually select TWS/IB Gateway log file:");

        logDirectoryManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logDirectoryManualActionPerformed(evt);
            }
        });

        jLabel8.setText("Manually select settings file:");

        browseSettingsManual.setText("Browse");
        browseSettingsManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseSettingsManualActionPerformed(evt);
            }
        });

        browseZip.setText("Browse");
        browseZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseZipActionPerformed(evt);
            }
        });

        browseExtract.setText("Browse");
        browseExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseExtractActionPerformed(evt);
            }
        });

        twsIbgGroup.add(twsRadio);
        twsRadio.setText("TWS");
        twsRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twsRadioActionPerformed(evt);
            }
        });

        twsIbgGroup.add(ibgRadio);
        ibgRadio.setText("IB Gateway");
        ibgRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ibgRadioActionPerformed(evt);
            }
        });

        extractProgressBar.setForeground(new java.awt.Color(153, 153, 153));
        extractProgressBar.setStringPainted(true);

        jLabel10.setText("Extraction Progress:");

        browseLogManual.setText("Browse");
        browseLogManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseLogManualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout configurePaneLayout = new javax.swing.GroupLayout(configurePane);
        configurePane.setLayout(configurePaneLayout);
        configurePaneLayout.setHorizontalGroup(
            configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(configurePaneLayout.createSequentialGroup()
                        .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loadDirectory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, configurePaneLayout.createSequentialGroup()
                                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(extractDirectory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browseZip)
                            .addGroup(configurePaneLayout.createSequentialGroup()
                                .addComponent(browseExtract)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(extractBtn)))
                        .addGap(182, 182, 182))
                    .addGroup(configurePaneLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(configurePaneLayout.createSequentialGroup()
                        .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(configurePaneLayout.createSequentialGroup()
                                .addComponent(settingsDirectoryManual, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseSettingsManual))
                            .addComponent(jLabel2)
                            .addComponent(jLabel10)
                            .addComponent(extractProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(configurePaneLayout.createSequentialGroup()
                                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(logComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(97, 97, 97)
                                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(settingsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(configurePaneLayout.createSequentialGroup()
                                .addComponent(twsRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ibgRadio))
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addGroup(configurePaneLayout.createSequentialGroup()
                                .addComponent(logDirectoryManual, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseLogManual)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        configurePaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {browseExtract, browseSettingsManual});

        configurePaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {extractDirectory, logDirectoryManual, settingsDirectoryManual});

        configurePaneLayout.setVerticalGroup(
            configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseZip))
                .addGap(6, 6, 6)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extractDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseExtract)
                    .addComponent(extractBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extractProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(twsRadio)
                    .addComponent(ibgRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logDirectoryManual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseLogManual))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(settingsDirectoryManual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseSettingsManual))
                .addContainerGap(86, Short.MAX_VALUE))
        );

        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        extractManualGroup.add(useExtractFileBtn);
        useExtractFileBtn.setSelected(true);
        useExtractFileBtn.setText("Use extracted files");
        useExtractFileBtn.setToolTipText("Choose to analyze files from extracted diagnostic zip");
        useExtractFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useExtractFileBtnActionPerformed(evt);
            }
        });

        extractManualGroup.add(useManualFileBtn);
        useManualFileBtn.setText("Use manually imported files");
        useManualFileBtn.setToolTipText("Choose to analyze files imported manually");
        useManualFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useManualFileBtnActionPerformed(evt);
            }
        });

        statusLabel.setText("Status:");

        logFileStatus.setText("Log File");

        settingsFileStatus.setText("Settings File");

        analyzeBtn.setText("Analyze");
        analyzeBtn.setEnabled(false);
        analyzeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(useExtractFileBtn)
                    .addComponent(useManualFileBtn)
                    .addComponent(statusLabel)
                    .addComponent(logFileStatus)
                    .addComponent(settingsFileStatus))
                .addContainerGap(89, Short.MAX_VALUE))
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(analyzeBtn)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useExtractFileBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useManualFileBtn)
                .addGap(18, 18, 18)
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logFileStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsFileStatus)
                .addGap(18, 18, 18)
                .addComponent(analyzeBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout configurePanelLayout = new javax.swing.GroupLayout(configurePanel);
        configurePanel.setLayout(configurePanelLayout);
        configurePanelLayout.setHorizontalGroup(
            configurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configurePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        configurePanelLayout.setVerticalGroup(
            configurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(configurePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        MainPane.addTab("Configure", null, configurePanel, "Configure log file locations");

        analyzeAllBtn.setText("All");

        analyzeEnvBtn.setText("Env");
        analyzeEnvBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeEnvBtnActionPerformed(evt);
            }
        });

        analyzeLoginSeqBtn.setText("Login Seq");

        analyzeSysResBtn.setText("SysRes");

        analyzeMktDataBtn.setText("Market Data");

        analyzeConnBtn.setText("Conn");

        analyzeHtbpBtn.setText("Htbp");

        analyzeAPIBtn.setText("API");

        analyzeOrdTrdBtn.setText("Orders & Trades");

        jButton1.setText("Cls All");

        autoClsCheck.setText("Auto Cls");

        deepAnalysisCheck.setSelected(true);
        deepAnalysisCheck.setText("Deep Analysis");
        deepAnalysisCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deepAnalysisCheckActionPerformed(evt);
            }
        });

        includeXmlCheck.setText("Include Tws.xml in analysis");

        includeTrdFileCheck.setText("Include .Trd files in analysis");

        jLabel9.setText("Font Size: ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(autoClsCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deepAnalysisCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(includeXmlCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(includeTrdFileCheck)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(analyzeAllBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeEnvBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeLoginSeqBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeSysResBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeMktDataBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeConnBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeHtbpBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeAPIBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeOrdTrdBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 203, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(analyzeAllBtn)
                    .addComponent(analyzeEnvBtn)
                    .addComponent(analyzeLoginSeqBtn)
                    .addComponent(analyzeSysResBtn)
                    .addComponent(analyzeMktDataBtn)
                    .addComponent(analyzeConnBtn)
                    .addComponent(analyzeHtbpBtn)
                    .addComponent(analyzeAPIBtn)
                    .addComponent(analyzeOrdTrdBtn)
                    .addComponent(jButton1)
                    .addComponent(jLabel9)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoClsCheck)
                    .addComponent(deepAnalysisCheck)
                    .addComponent(includeXmlCheck)
                    .addComponent(includeTrdFileCheck)))
        );

        logDisplayPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        logDisplayPane1.setPreferredSize(new java.awt.Dimension(java.awt.Toolkit.getDefaultToolkit().getScreenSize().width-55, (int)((java.awt.Toolkit.getDefaultToolkit().getScreenSize().height-50)*0.35)));

        javax.swing.GroupLayout logDisplayPane1Layout = new javax.swing.GroupLayout(logDisplayPane1);
        logDisplayPane1.setLayout(logDisplayPane1Layout);
        logDisplayPane1Layout.setHorizontalGroup(
            logDisplayPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        logDisplayPane1Layout.setVerticalGroup(
            logDisplayPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 119, Short.MAX_VALUE)
        );

        logDisplayPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        logDisplayPane2.setPreferredSize(new java.awt.Dimension(java.awt.Toolkit.getDefaultToolkit().getScreenSize().width-55, (int)((java.awt.Toolkit.getDefaultToolkit().getScreenSize().height-50)*0.3)));

        javax.swing.GroupLayout logDisplayPane2Layout = new javax.swing.GroupLayout(logDisplayPane2);
        logDisplayPane2.setLayout(logDisplayPane2Layout);
        logDisplayPane2Layout.setHorizontalGroup(
            logDisplayPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        logDisplayPane2Layout.setVerticalGroup(
            logDisplayPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 149, Short.MAX_VALUE)
        );

        logDisplayPane3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout logDisplayPane3Layout = new javax.swing.GroupLayout(logDisplayPane3);
        logDisplayPane3.setLayout(logDisplayPane3Layout);
        logDisplayPane3Layout.setHorizontalGroup(
            logDisplayPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        logDisplayPane3Layout.setVerticalGroup(
            logDisplayPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 113, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout twsLogFilterPanelLayout = new javax.swing.GroupLayout(twsLogFilterPanel);
        twsLogFilterPanel.setLayout(twsLogFilterPanelLayout);
        twsLogFilterPanelLayout.setHorizontalGroup(
            twsLogFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(logDisplayPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1052, Short.MAX_VALUE)
            .addComponent(logDisplayPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(logDisplayPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1052, Short.MAX_VALUE)
        );
        twsLogFilterPanelLayout.setVerticalGroup(
            twsLogFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(twsLogFilterPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logDisplayPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logDisplayPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logDisplayPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        MainPane.addTab("TWS Log Filter", twsLogFilterPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1057, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPane, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void useExtractFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useExtractFileBtnActionPerformed
        // Log section
        if(logComboBox.getSelectedItem() != null){
            manager.selectLogFile(logComboBox.getSelectedItem().toString());            
            // Set Status
            logReady = true;
            updateStatus();
        } else {
            logReady = false;
            updateStatus();
        }
        
        // Settings section
        if(settingsComboBox.getSelectedItem() != null){
            manager.selectSettingsFile(settingsComboBox.getSelectedItem().toString());
            // Set Status
            settingsReady = true;
            updateStatus();
        } else {
            settingsReady = false;
            updateStatus();
        }
    }//GEN-LAST:event_useExtractFileBtnActionPerformed

    private void useManualFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useManualFileBtnActionPerformed
        // TODO add your handling code here:
        // Log section
        if(!logDirectoryManual.getText().isEmpty()){
            manager.selectLogFile(logDirectoryManual.getText());            
            // Set Status
            logReady = true;
            updateStatus();
        } else {
            logReady = false;
            updateStatus();
        }
        
        // Settings section
        if(!settingsDirectoryManual.getText().isEmpty()){
            System.out.println(settingsDirectoryManual.getText());
            manager.selectSettingsFile(settingsDirectoryManual.getText());
            // Set Status
            settingsReady = true;
            updateStatus();
        } else {
            settingsReady = false;
            updateStatus();
        }
    }//GEN-LAST:event_useManualFileBtnActionPerformed

    private void analyzeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeBtnActionPerformed
        // TODO add your handling code here:
        MainPane.setSelectedComponent(twsLogFilterPanel);
    }//GEN-LAST:event_analyzeBtnActionPerformed

    private void analyzeEnvBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeEnvBtnActionPerformed
        // TODO add your handling code here:
        manager.startParse(Choices.ENV, textPaneList);
    }//GEN-LAST:event_analyzeEnvBtnActionPerformed

    private void deepAnalysisCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deepAnalysisCheckActionPerformed
        // TODO add your handling code here:
        if(deepAnalysisCheck.isSelected()){
            
        } else {
            
        }
    }//GEN-LAST:event_deepAnalysisCheckActionPerformed

    private void browseLogManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseLogManualActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            logDirectoryManual.setText(fileChooser.getSelectedFile().getAbsolutePath());
            if(useManualFileBtn.isSelected()){
                manager.selectLogFile(logDirectoryManual.getText());
                logReady = true;
                updateStatus();
            }
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find file.");
        }
    }//GEN-LAST:event_browseLogManualActionPerformed

    private void ibgRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ibgRadioActionPerformed

        manager.setIsTws(false);

        // Populate and select log file for combo box
        handleLogComboBox_ibg();

        // Populate and select settings file for combo box
        handleSettingsComboBox_ibg();
    }//GEN-LAST:event_ibgRadioActionPerformed

    private void twsRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twsRadioActionPerformed

        manager.setIsTws(true);

        // Populate and select log file for combo box
        handleLogComboBox_tws();

        // Populate and select settings file for combo box
        handleSettingsComboBox_tws();
    }//GEN-LAST:event_twsRadioActionPerformed

    private void browseExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseExtractActionPerformed
        // TODO add your handling code here:
        directoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = directoryChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File directory = directoryChooser.getSelectedFile();
            extractDirectory.setText(directory.getAbsolutePath());
            manager.setReaderLocation(null, extractDirectory.getText());
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find directory.");
        }
    }//GEN-LAST:event_browseExtractActionPerformed

    private void browseZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseZipActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            diagnosticFile = fileChooser.getSelectedFile();
            loadDirectory.setText(diagnosticFile.getAbsolutePath());
            extractDirectory.setText(diagnosticFile.getAbsolutePath() + "_extracted");
            manager.setReaderLocation(loadDirectory.getText(), extractDirectory.getText());
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find file.");
        }
    }//GEN-LAST:event_browseZipActionPerformed

    private void browseSettingsManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseSettingsManualActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            settingsDirectoryManual.setText(fileChooser.getSelectedFile().getAbsolutePath());
            if(useManualFileBtn.isSelected()){
                manager.selectSettingsFile(settingsDirectoryManual.getText());
                settingsReady = true;
                updateStatus();
            }
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find file.");
        }
    }//GEN-LAST:event_browseSettingsManualActionPerformed

    private void logDirectoryManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logDirectoryManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_logDirectoryManualActionPerformed

    private void settingsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsComboBoxActionPerformed
        // TODO add your handling code here:
        if(settingsComboBox.getSelectedItem() != null){
            manager.selectSettingsFile(settingsComboBox.getSelectedItem().toString());

            // Set Status
            if(useExtractedZip == true){
                settingsReady = true;
                updateStatus();
            }
        }
    }//GEN-LAST:event_settingsComboBoxActionPerformed

    private void logComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logComboBoxActionPerformed
        // TODO add your handling code here:
        if(logComboBox.getSelectedItem() != null){
            manager.selectLogFile(logComboBox.getSelectedItem().toString());

            // Set Status
            if(useExtractedZip == true){
                logReady = true;
                updateStatus();
            }
        }
    }//GEN-LAST:event_logComboBoxActionPerformed

    private void extractBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractBtnActionPerformed
        // TODO add your handling code here:
        File directory = new File(extractDirectory.getText());
        if(directory.isDirectory()){
            int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The directory already exists. Do you want to clear the " + extractDirectory.getText() + " folder first?");
            if(reply == javax.swing.JOptionPane.YES_OPTION){
                try{
                    FileUtils.cleanDirectory(directory); // Clear extract directory
                    extractProgressBar.setValue(20); /*Progress bar setting*/
                } catch (IOException e){
                    e.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(null, "Failed to clear directory");
                    extractProgressBar.setValue(0); /*Progress bar setting*/
                }
            }

            extractDirectory.setText(directory.toString());
            manager.setReaderLocation(null, extractDirectory.getText());
            // Initialize tws/ibg log combo box
            logComboBox.setSelectedItem(null);
            logComboBox.removeAllItems();
            isTwsLogAdded = false;
            isIbgLogAdded = false;

            // Iniatialize settings combo box
            settingsComboBox.setSelectedItem(null);
            settingsComboBox.removeAllItems();
            isTwsSettingsAdded = false;
            isIbgSettingsAdded = false;

            manager.resetAllFileList();
            extractProgressBar.setValue(30); /*Progress bar setting*/

            manager.extract();
            isExtracted = true;
            extractProgressBar.setValue(80); /*Progress bar setting*/

            if(twsRadio.isSelected()){
                // Populate and select log file for combo box
                handleLogComboBox_tws();

                // Populate and select settings file for combo box
                handleSettingsComboBox_tws();
            } else if(ibgRadio.isSelected()){
                // Populate and select log file for combo box
                handleLogComboBox_ibg();

                // Populate and select settings file for combo box
                handleSettingsComboBox_ibg();
            }
            extractProgressBar.setValue(100); /*Progress bar setting*/
        }
        else {
            int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The directory " + extractDirectory.getText() + " does not exist. Do you want to create it?");
            if(reply == javax.swing.JOptionPane.YES_OPTION){
                directory.mkdir();
                extractDirectory.setText(directory.toString());
                manager.setReaderLocation(null, extractDirectory.getText());
                extractProgressBar.setValue(20); /*Progress bar setting*/
                // Initialize tws/ibg log combo box
                logComboBox.setSelectedItem(null);
                logComboBox.removeAllItems();
                isTwsLogAdded = false; // initialize
                isIbgLogAdded = false;

                // Initialize settings file combo box
                settingsComboBox.setSelectedItem(null);
                settingsComboBox.removeAllItems();
                isTwsSettingsAdded = false;
                isIbgSettingsAdded = false;

                manager.resetAllFileList();
                extractProgressBar.setValue(30); /*Progress bar setting*/

                manager.extract();
                isExtracted = true;
                extractProgressBar.setValue(80); /*Progress bar setting*/

                if(twsRadio.isSelected()){
                    // Populate and select log file for combo box
                    handleLogComboBox_tws();

                    // Populate and select settings file for combo box
                    handleSettingsComboBox_tws();
                } else if(ibgRadio.isSelected()){
                    // Populate and select log file for combo box
                    handleLogComboBox_ibg();

                    // Populate and select settings file for combo box
                    handleSettingsComboBox_ibg();
                }
                extractProgressBar.setValue(100); /*Progress bar setting*/
            }
            else {
                javax.swing.JOptionPane.showMessageDialog(null, "Failed to load directory. Please find a different directory.");
                extractDirectory.setText(System.getProperty("user.home").toString() + "\\Temp");
                extractProgressBar.setValue(0); /*Progress bar setting*/
            }
        }
    }//GEN-LAST:event_extractBtnActionPerformed

    private void extractDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractDirectoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_extractDirectoryActionPerformed

    private void loadDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDirectoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loadDirectoryActionPerformed
    
    private void customInitComponents(){
        // Put Window location at center
        java.awt.Dimension dim = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);       
        
    }
                                
    private void handleLogComboBox_tws(){
        if(isExtracted == true && isTwsLogAdded == false){
            String[] list = manager.getLogFileListNames();
            if(list == null){
                logComboBox.setSelectedItem(null);                
                isTwsLogAdded = true;
                if(useExtractFileBtn.isSelected()){
                    manager.selectLogFile(null);
                    logReady = false;
                    updateStatus();
                }
                return;
            }
            
            for(String s: list){
                logComboBox.addItem(s);
            }
            isTwsLogAdded = true;
        }
        logComboBox.setSelectedItem(manager.getTodayLogFileName());
        if(logComboBox.getSelectedItem() != null && useExtractFileBtn.isSelected()){
            manager.selectLogFile(logComboBox.getSelectedItem().toString());
            logReady = true;
            updateStatus();
        } else {
            logReady = false;
            updateStatus();
        }
    }
    
    private void handleSettingsComboBox_tws(){
        if(isExtracted == true && isTwsSettingsAdded == false){
            String[] list = manager.getSettingsFileListNames();
            if(list == null){
                settingsComboBox.setSelectedItem(null);                
                isTwsSettingsAdded = true;
                if(useExtractFileBtn.isSelected()){
                    manager.selectSettingsFile(null);
                    settingsReady = false;
                    updateStatus();
                }
                return;
            }
            
            for(String s: list){
                settingsComboBox.addItem(s);
            }
            isTwsSettingsAdded = true;
        }        
        settingsComboBox.setSelectedItem(manager.getTodaySettingsFileName()); 
        if(settingsComboBox.getSelectedItem() != null && useExtractFileBtn.isSelected()){
            manager.selectSettingsFile(settingsComboBox.getSelectedItem().toString());
            settingsReady = true;
            updateStatus();
        } else {
            settingsReady = false;
            updateStatus();
        }
    }
        
    private void handleLogComboBox_ibg(){
        if(isExtracted == true && isIbgLogAdded == false){
            String[] list = manager.getLogFileListNames();
            if(list == null){
                logComboBox.setSelectedItem(null);                
                isIbgLogAdded = true; 
                if(useExtractFileBtn.isSelected()){
                    manager.selectLogFile(null);
                    logReady = false;
                    updateStatus();
                }
                return;
            }
            
            for(String s: list){
                logComboBox.addItem(s);
            }
            isIbgLogAdded = true;            
        }
        logComboBox.setSelectedItem(manager.getTodayLogFileName());
        if(logComboBox.getSelectedItem() != null && useExtractFileBtn.isSelected()){
            manager.selectLogFile(logComboBox.getSelectedItem().toString());
            logReady = true;
            updateStatus();
        } else {
            logReady = false;
            updateStatus();
        }
    }
    
    private void handleSettingsComboBox_ibg(){
        if(isExtracted == true && isIbgSettingsAdded == false){
            String[] list = manager.getSettingsFileListNames();
            if(list == null){
                settingsComboBox.setSelectedItem(null);                
                isIbgSettingsAdded = true;
                if(useExtractFileBtn.isSelected()){
                    manager.selectSettingsFile(null);
                    settingsReady = false;
                    updateStatus();
                }
                return;
            }
            
            for(String s: list){
                settingsComboBox.addItem(s);
            }
            isIbgSettingsAdded = true;
        }
        settingsComboBox.setSelectedItem(manager.getTodaySettingsFileName());
        if(settingsComboBox.getSelectedItem() != null && useExtractFileBtn.isSelected()){
            manager.selectSettingsFile(settingsComboBox.getSelectedItem().toString());
            settingsReady = true;
            updateStatus();
        } else {
            settingsReady = false;
            updateStatus();
        }
    }
    
    private void updateStatus(){
        // Update Log File status
        if(logReady == true){
            logFileStatus.setText("Log File - Ready");
            logFileStatus.setForeground(Color.GREEN);
            analyzeBtn.setEnabled(true);
        } else {
            logFileStatus.setText("Log File - Not Selected");
            logFileStatus.setForeground(Color.RED);
            analyzeBtn.setEnabled(false);
        }
        
        // Update Settings File Status
        if(settingsReady == true){
            settingsFileStatus.setText("Settings File - Ready");
            settingsFileStatus.setForeground(Color.GREEN);
        } else {
            settingsFileStatus.setText("Settings File - Not Selected");
            settingsFileStatus.setForeground(Color.RED);
        }        
    }
    
    public static void addStylesToDocument(StyledDocument doc){
        Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
        
        Style regular = doc.addStyle("regular", def);
        //StyleConstants.setFontFamily(def, "SabsSerif");
        
        Style s = doc.addStyle("italic", regular);
        StyleConstants.setItalic(s, true);
        
        s = doc.addStyle("blackBold", regular);
        StyleConstants.setBold(s, true);
        
        s = doc.addStyle("blueBold", regular);
        StyleConstants.setForeground(s, Color.blue);
        StyleConstants.setBold(s, true);
        
        s = doc.addStyle("green", regular);
        StyleConstants.setForeground(s, Color.green.darker());
        
        s = doc.addStyle("orange", regular);
        StyleConstants.setForeground(s, Color.orange);
        
        s = doc.addStyle("red", regular);
        StyleConstants.setForeground(s, Color.red);
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(demoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(demoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(demoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(demoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                demoFrame mainFrame = new demoFrame();
                
                mainFrame.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane MainPane;
    private javax.swing.JButton analyzeAPIBtn;
    private javax.swing.JButton analyzeAllBtn;
    private javax.swing.JButton analyzeBtn;
    private javax.swing.JButton analyzeConnBtn;
    private javax.swing.JButton analyzeEnvBtn;
    private javax.swing.JButton analyzeHtbpBtn;
    private javax.swing.JButton analyzeLoginSeqBtn;
    private javax.swing.JButton analyzeMktDataBtn;
    private javax.swing.JButton analyzeOrdTrdBtn;
    private javax.swing.JButton analyzeSysResBtn;
    private javax.swing.JCheckBox autoClsCheck;
    private javax.swing.JButton browseExtract;
    private javax.swing.JButton browseLogManual;
    private javax.swing.JButton browseSettingsManual;
    private javax.swing.JButton browseZip;
    private javax.swing.JPanel configurePane;
    private javax.swing.JPanel configurePanel;
    private javax.swing.JCheckBox deepAnalysisCheck;
    private javax.swing.JFileChooser directoryChooser;
    private javax.swing.JButton extractBtn;
    private javax.swing.JTextField extractDirectory;
    private javax.swing.ButtonGroup extractManualGroup;
    private javax.swing.JProgressBar extractProgressBar;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JRadioButton ibgRadio;
    private javax.swing.JCheckBox includeTrdFileCheck;
    private javax.swing.JCheckBox includeXmlCheck;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField loadDirectory;
    private javax.swing.JComboBox<String> logComboBox;
    private javax.swing.JTextField logDirectoryManual;
    private javax.swing.JPanel logDisplayPane1;
    private javax.swing.JPanel logDisplayPane2;
    private javax.swing.JPanel logDisplayPane3;
    private javax.swing.JLabel logFileStatus;
    private javax.swing.JComboBox<String> settingsComboBox;
    private javax.swing.JTextField settingsDirectoryManual;
    private javax.swing.JLabel settingsFileStatus;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.ButtonGroup twsIbgGroup;
    private javax.swing.JPanel twsLogFilterPanel;
    private javax.swing.JRadioButton twsRadio;
    private javax.swing.JRadioButton useExtractFileBtn;
    private javax.swing.JRadioButton useManualFileBtn;
    // End of variables declaration//GEN-END:variables
}
