/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package com.ib.demoFrame;

import com.ib.manager.*;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author sitengjin
 */
public class demoFrame extends javax.swing.JFrame {
    private LogManager manager = new LogManager();
    private File diagnosticFile;
    private boolean isExtracted = false;
    
    private boolean isTwsLogAdded = false;
    private boolean isIbgLogAdded = false;
    private boolean isTwsSettingsAdded = false;
    private boolean isIbgSettingsAdded = false;
    
    private boolean useExtractedZip = true;
    
    /**
     * Creates new form demoFrame
     */
    public demoFrame() {
        initComponents();
        //customInitComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        twsIbgGroup = new javax.swing.ButtonGroup();
        extractManualGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        configurePane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        loadDirectory = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        extractDirectory = new javax.swing.JTextField();
        extractBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        logComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        settingsComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        browseLogManual = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        browseSettingsManual = new javax.swing.JButton();
        browseZip = new javax.swing.JButton();
        browseExtract = new javax.swing.JButton();
        twsRadio = new javax.swing.JRadioButton();
        ibgRadio = new javax.swing.JRadioButton();
        extractProgressBar = new javax.swing.JProgressBar();
        jLabel10 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        useExtractFileBtn = new javax.swing.JRadioButton();
        useManualFileBtn = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Log Analyzer");
        setName("mainPanel"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        jTabbedPane1.setName(""); // NOI18N

        jPanel1.setName(""); // NOI18N

        jLabel1.setText("Log File Configuration");

        jLabel2.setText("Import downloaded diagnostic zip file:");

        loadDirectory.setText(System.getProperty("user.home").toString());
        loadDirectory.setMaximumSize(new java.awt.Dimension(72, 20));
        loadDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDirectoryActionPerformed(evt);
            }
        });

        jLabel3.setText("Extract zip file to location:");

        extractDirectory.setText(System.getProperty("user.home").toString() + "\\Temp");
        extractDirectory.setToolTipText("");
        extractDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractDirectoryActionPerformed(evt);
            }
        });

        extractBtn.setText("Extract");
        extractBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("TWS/IB Gateway log:");

        logComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Settings File:");

        settingsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Or");

        jLabel7.setText("Manually select TWS/IB Gateway log file:");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        browseLogManual.setText("Browse");
        browseLogManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseLogManualActionPerformed(evt);
            }
        });

        jLabel8.setText("Manually select settings file:");

        browseSettingsManual.setText("Browse");

        browseZip.setText("Browse");
        browseZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseZipActionPerformed(evt);
            }
        });

        browseExtract.setText("Browse");
        browseExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseExtractActionPerformed(evt);
            }
        });

        twsIbgGroup.add(twsRadio);
        twsRadio.setText("TWS");
        twsRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twsRadioActionPerformed(evt);
            }
        });

        twsIbgGroup.add(ibgRadio);
        ibgRadio.setText("IB Gateway");
        ibgRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ibgRadioActionPerformed(evt);
            }
        });

        extractProgressBar.setForeground(new java.awt.Color(153, 153, 153));
        extractProgressBar.setStringPainted(true);

        jLabel10.setText("Extraction Progress:");

        javax.swing.GroupLayout configurePaneLayout = new javax.swing.GroupLayout(configurePane);
        configurePane.setLayout(configurePaneLayout);
        configurePaneLayout.setHorizontalGroup(
            configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePaneLayout.createSequentialGroup()
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(configurePaneLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1))
                    .addGroup(configurePaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6))
                    .addGroup(configurePaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, configurePaneLayout.createSequentialGroup()
                                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(logComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(97, 97, 97)
                                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(settingsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configurePaneLayout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(extractProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, configurePaneLayout.createSequentialGroup()
                                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(twsRadio))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ibgRadio)
                                    .addGroup(configurePaneLayout.createSequentialGroup()
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(browseSettingsManual))
                                    .addGroup(configurePaneLayout.createSequentialGroup()
                                        .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(loadDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(extractDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(browseZip)
                                            .addComponent(browseExtract))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(extractBtn))
                                    .addGroup(configurePaneLayout.createSequentialGroup()
                                        .addGap(246, 246, 246)
                                        .addComponent(browseLogManual)))))))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        configurePaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {extractDirectory, jTextField3, jTextField4, loadDirectory});

        configurePaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {browseExtract, browseLogManual, browseSettingsManual});

        configurePaneLayout.setVerticalGroup(
            configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePaneLayout.createSequentialGroup()
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(configurePaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseZip)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(extractDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(extractBtn)
                            .addComponent(browseExtract)))
                    .addGroup(configurePaneLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel2))
                    .addGroup(configurePaneLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(loadDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(twsRadio)
                    .addComponent(ibgRadio)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(extractProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseLogManual))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseSettingsManual))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        extractManualGroup.add(useExtractFileBtn);
        useExtractFileBtn.setSelected(true);
        useExtractFileBtn.setText("Use extracted files");
        useExtractFileBtn.setToolTipText("Choose to analyze files from extracted diagnostic zip");

        extractManualGroup.add(useManualFileBtn);
        useManualFileBtn.setText("Use manually imported files");
        useManualFileBtn.setToolTipText("Choose to analyze files imported manually");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(useExtractFileBtn)
                    .addComponent(useManualFileBtn))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useExtractFileBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useManualFileBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configurePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(configurePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(94, 94, 94))
        );

        jTabbedPane1.addTab("Configure", null, jPanel1, "Configure log file locations");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 866, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 456, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("TWS Log Filter", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 866, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 456, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("API Log Filter", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void customInitComponents(){
        //extractProgressBar
    }
    
    private void extractDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractDirectoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_extractDirectoryActionPerformed
    
    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed
    
    private void browseZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseZipActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            diagnosticFile = fileChooser.getSelectedFile();
            loadDirectory.setText(diagnosticFile.getAbsolutePath().toString());
            extractDirectory.setText(diagnosticFile.getAbsolutePath().toString() + "_extracted");
            manager.setReaderLocation(loadDirectory.getText(), extractDirectory.getText());
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find file.");
        }
    }//GEN-LAST:event_browseZipActionPerformed
    
    private void loadDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDirectoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loadDirectoryActionPerformed
    
    private void browseExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseExtractActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File directory = fileChooser.getSelectedFile();
            extractDirectory.setText(directory.getAbsolutePath().toString());
            manager.setReaderLocation(null, extractDirectory.getText());
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find directory.");
        }
        
    }//GEN-LAST:event_browseExtractActionPerformed
    
    private void extractBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractBtnActionPerformed
        // TODO add your handling code here:
        File directory = new File(extractDirectory.getText());
        if(directory.isDirectory()){
            int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The directory already exists. Do you want to clear the " + extractDirectory.getText() + " folder first?");
            if(reply == javax.swing.JOptionPane.YES_OPTION){
                try{
                    FileUtils.cleanDirectory(directory); // Clear extract directory
                    extractProgressBar.setValue(20); /*Progress bar setting*/
                } catch (IOException e){
                    e.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(null, "Failed to clear directory");
                    extractProgressBar.setValue(0); /*Progress bar setting*/
                }
            }
            
            extractDirectory.setText(directory.toString());
            manager.setReaderLocation(null, extractDirectory.getText());
            // Initialize tws/ibg log combo box
            logComboBox.setSelectedItem(null);
            logComboBox.removeAllItems();            
            isTwsLogAdded = false; 
            isIbgLogAdded = false;
                        
            // Iniatialize settings combo box
            settingsComboBox.setSelectedItem(null);
            settingsComboBox.removeAllItems();
            isTwsSettingsAdded = false;
            isIbgSettingsAdded = false;
            
            manager.resetAllFileList();
            extractProgressBar.setValue(30); /*Progress bar setting*/
            
            manager.extract();
            isExtracted = true;
            extractProgressBar.setValue(80); /*Progress bar setting*/
            
            if(twsRadio.isSelected()){
                // Populate and select log file for combo box
                handleLogComboBox_tws();
                
                // Populate and select settings file for combo box
                handleSettingsComboBox_tws();
            } else if(ibgRadio.isSelected()){
                // Populate and select log file for combo box
                handleLogComboBox_ibg();
                
                // Populate and select settings file for combo box
                handleSettingsComboBox_ibg();
            }
            extractProgressBar.setValue(100); /*Progress bar setting*/
        }
        else {
            int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The directory " + extractDirectory.getText() + " does not exist. Do you want to create it?");
            if(reply == javax.swing.JOptionPane.YES_OPTION){                
                directory.mkdir();
                extractDirectory.setText(directory.toString());
                manager.setReaderLocation(null, extractDirectory.getText());
                extractProgressBar.setValue(20); /*Progress bar setting*/
                // Initialize tws/ibg log combo box
                logComboBox.setSelectedItem(null);
                logComboBox.removeAllItems();
                isTwsLogAdded = false; // initialize
                isIbgLogAdded = false;
                
                // Initialize settings file combo box
                settingsComboBox.setSelectedItem(null);
                settingsComboBox.removeAllItems();
                isTwsSettingsAdded = false;
                isIbgSettingsAdded = false;
                
                manager.resetAllFileList();
                extractProgressBar.setValue(30); /*Progress bar setting*/
                
                manager.extract();
                isExtracted = true;
                extractProgressBar.setValue(80); /*Progress bar setting*/
                
                if(twsRadio.isSelected()){
                    // Populate and select log file for combo box
                    handleLogComboBox_tws();
                    
                    // Populate and select settings file for combo box
                    handleSettingsComboBox_tws();
                } else if(ibgRadio.isSelected()){
                    // Populate and select log file for combo box
                    handleLogComboBox_ibg();
                    
                    // Populate and select settings file for combo box
                    handleSettingsComboBox_ibg();
                }
                extractProgressBar.setValue(100); /*Progress bar setting*/
            }
            else {
                javax.swing.JOptionPane.showMessageDialog(null, "Failed to load directory. Please find a different directory.");
                extractDirectory.setText(System.getProperty("user.home").toString() + "\\Temp");
                extractProgressBar.setValue(0); /*Progress bar setting*/
            }
        }
    }//GEN-LAST:event_extractBtnActionPerformed
    
    private void twsRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twsRadioActionPerformed
        
        manager.setIsTws(true);
        
        // Populate and select log file for combo box
        handleLogComboBox_tws();
        
        // Populate and select settings file for combo box
        handleSettingsComboBox_tws();      
    }//GEN-LAST:event_twsRadioActionPerformed
    
    private void handleLogComboBox_tws(){
        if(isExtracted == true && isTwsLogAdded == false){
            String[] list = manager.getLogFileListNames();
            if(list == null){
                logComboBox.setSelectedItem(null);
                manager.selectLogFile(null);
                isTwsLogAdded = true;
                return;
            }
            
            for(String s: list){
                logComboBox.addItem(s);
            }
            isTwsLogAdded = true;
        }
        logComboBox.setSelectedItem(manager.getTodayLogFileName());
        manager.selectLogFile(logComboBox.getSelectedItem().toString());
    }
    
    private void handleSettingsComboBox_tws(){
        if(isExtracted == true && isTwsSettingsAdded == false){
            String[] list = manager.getSettingsFileListNames();
            if(list == null){
                settingsComboBox.setSelectedItem(null);
                manager.selectSettingsFile(null);
                isTwsSettingsAdded = true;
                return;
            }
            
            for(String s: list){
                settingsComboBox.addItem(s);
            }
            isTwsSettingsAdded = true;
        }        
        settingsComboBox.setSelectedItem(manager.getTodaySettingsFileName()); 
        manager.selectSettingsFile(settingsComboBox.getSelectedItem().toString());
    }
    
    private void ibgRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ibgRadioActionPerformed

        manager.setIsTws(false);
        
        // Populate and select log file for combo box
        handleLogComboBox_ibg();
        
        // Populate and select settings file for combo box
        handleSettingsComboBox_ibg();
    }//GEN-LAST:event_ibgRadioActionPerformed
    
    private void handleLogComboBox_ibg(){
        if(isExtracted == true && isIbgLogAdded == false){
            String[] list = manager.getLogFileListNames();
            if(list == null){
                logComboBox.setSelectedItem(null);
                manager.selectLogFile(null);
                isIbgLogAdded = true; 
                return;
            }
            
            for(String s: list){
                logComboBox.addItem(s);
            }
            isIbgLogAdded = true;            
        }
        logComboBox.setSelectedItem(manager.getTodayLogFileName());
        manager.selectLogFile(logComboBox.getSelectedItem().toString());
    }
    
    private void handleSettingsComboBox_ibg(){
        if(isExtracted == true && isIbgSettingsAdded == false){
            String[] list = manager.getSettingsFileListNames();
            if(list == null){
                settingsComboBox.setSelectedItem(null);
                manager.selectSettingsFile(null);
                isIbgSettingsAdded = true;
                return;
            }
            
            for(String s: list){
                settingsComboBox.addItem(s);
            }
            isIbgSettingsAdded = true;
        }
        settingsComboBox.setSelectedItem(manager.getTodaySettingsFileName());
        manager.selectSettingsFile(settingsComboBox.getSelectedItem().toString());
    }
    
    private void logComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logComboBoxActionPerformed
        // TODO add your handling code here:
        if(logComboBox.getSelectedItem() != null)
            manager.selectLogFile(logComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_logComboBoxActionPerformed

    private void settingsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsComboBoxActionPerformed
        // TODO add your handling code here:
        if(settingsComboBox.getSelectedItem() != null)
            manager.selectLogFile(settingsComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_settingsComboBoxActionPerformed

    private void browseLogManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseLogManualActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            diagnosticFile = fileChooser.getSelectedFile();
            loadDirectory.setText(diagnosticFile.getAbsolutePath().toString());
            extractDirectory.setText(diagnosticFile.getAbsolutePath().toString() + "_extracted");
            manager.setReaderLocation(loadDirectory.getText(), extractDirectory.getText());
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find file.");
        }
    }//GEN-LAST:event_browseLogManualActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(demoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(demoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(demoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(demoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                demoFrame mainFrame = new demoFrame();
                
                mainFrame.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseExtract;
    private javax.swing.JButton browseLogManual;
    private javax.swing.JButton browseSettingsManual;
    private javax.swing.JButton browseZip;
    private javax.swing.JPanel configurePane;
    private javax.swing.JButton extractBtn;
    private javax.swing.JTextField extractDirectory;
    private javax.swing.ButtonGroup extractManualGroup;
    private javax.swing.JProgressBar extractProgressBar;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JRadioButton ibgRadio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField loadDirectory;
    private javax.swing.JComboBox<String> logComboBox;
    private javax.swing.JComboBox<String> settingsComboBox;
    private javax.swing.ButtonGroup twsIbgGroup;
    private javax.swing.JRadioButton twsRadio;
    private javax.swing.JRadioButton useExtractFileBtn;
    private javax.swing.JRadioButton useManualFileBtn;
    // End of variables declaration//GEN-END:variables
}
