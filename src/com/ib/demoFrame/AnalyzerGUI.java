/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package com.ib.demoFrame;

import com.ib.manager.*;
import java.awt.Color;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import org.apache.commons.io.FileUtils;
import java.util.HashMap;
import com.ib.parser.Choices;
import javax.swing.GroupLayout;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import javax.swing.text.*;

/**
 *
 * @author sitengjin
 */
public class AnalyzerGUI extends javax.swing.JFrame {
    private LogManager manager = new LogManager();
    private File diagnosticFile;
    private boolean isExtracted = false; //determine if to use extracted log or manual selected log
    
    private boolean isTwsLogAdded = false;
    private boolean isIbgLogAdded = false;
    private boolean isTwsSettingsAdded = false;
    private boolean isIbgSettingsAdded = false;
    private boolean isTradeFileAdded = false;
    
    private boolean logReady = false;
    private boolean settingsReady = false;
    private boolean trdReady = false;
    
    private HashMap<Integer, javax.swing.JTextPane> textPaneList = new HashMap<Integer, javax.swing.JTextPane>();
    
    /**
     * Creates new form demoFrame
     */
    public AnalyzerGUI() {
        initComponents();
        customInitTextPaneComponents();
        customInitComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        twsIbgGroup = new javax.swing.ButtonGroup();
        extractManualGroup = new javax.swing.ButtonGroup();
        directoryChooser = new javax.swing.JFileChooser();
        MainPane = new javax.swing.JTabbedPane();
        configurePanel = new javax.swing.JPanel();
        configurePane = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        loadDirectory = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        extractDirectory = new javax.swing.JTextField();
        extractBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        logComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        settingsComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        logDirectoryManual = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        browseSettingsManual = new javax.swing.JButton();
        browseZip = new javax.swing.JButton();
        browseExtract = new javax.swing.JButton();
        twsRadio = new javax.swing.JRadioButton();
        ibgRadio = new javax.swing.JRadioButton();
        extractProgressBar = new javax.swing.JProgressBar();
        jLabel10 = new javax.swing.JLabel();
        browseLogManual = new javax.swing.JButton();
        settingsDirectoryManual = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tradeComboBox = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        statusPanel = new javax.swing.JPanel();
        useExtractFileBtn = new javax.swing.JRadioButton();
        useManualFileBtn = new javax.swing.JRadioButton();
        statusLabel = new javax.swing.JLabel();
        logFileStatus = new javax.swing.JLabel();
        settingsFileStatus = new javax.swing.JLabel();
        analyzeBtn = new javax.swing.JButton();
        tradeFileStatus = new javax.swing.JLabel();
        twsLogFilterPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        analyzeAllBtn = new javax.swing.JButton();
        analyzeEnvBtn = new javax.swing.JButton();
        analyzeLoginSeqBtn = new javax.swing.JButton();
        analyzeSysResBtn = new javax.swing.JButton();
        analyzeMktDataBtn = new javax.swing.JButton();
        analyzeConnBtn = new javax.swing.JButton();
        analyzeHtbpBtn = new javax.swing.JButton();
        analyzeAPIBtn = new javax.swing.JButton();
        analyzeOrdTrdBtn = new javax.swing.JButton();
        clearAllBtn = new javax.swing.JButton();
        autoClsCheck = new javax.swing.JCheckBox();
        deepAnalysisCheck = new javax.swing.JCheckBox();
        includeXmlCheck = new javax.swing.JCheckBox();
        includeTrdFileCheck = new javax.swing.JCheckBox();
        openLogFileBtn = new javax.swing.JButton();
        regExText = new javax.swing.JTextField();
        matchCaseCheck = new javax.swing.JCheckBox();
        regExSearchBtn = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        textMainPane = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Log Analyzer");
        setName("mainPanel"); // NOI18N
        setPreferredSize(new java.awt.Dimension(java.awt.Toolkit.getDefaultToolkit().getScreenSize().width-50, java.awt.Toolkit.getDefaultToolkit().getScreenSize().height-50));
        setSize(new java.awt.Dimension(0, 0));

        MainPane.setName(""); // NOI18N
        MainPane.setPreferredSize(new java.awt.Dimension(484, 484));

        configurePanel.setName(""); // NOI18N

        configurePane.setBorder(javax.swing.BorderFactory.createTitledBorder("Log File Configuration"));

        jLabel2.setText("Import downloaded diagnostic zip file:");

        loadDirectory.setText(System.getProperty("user.home").toString());
        loadDirectory.setToolTipText("Select the uploaded diagnostic .zip file, or directly type in its path. (To manually select a single log file, please use \"Manually select TWS/IB Gateway log file\")");
        loadDirectory.setMaximumSize(new java.awt.Dimension(300, 20));
        loadDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDirectoryActionPerformed(evt);
            }
        });

        jLabel3.setText("Extract zip file to location:");

        extractDirectory.setText(System.getProperty("user.home").toString() + "\\Temp");
        extractDirectory.setToolTipText("Select the directory where you want to extract the .zip file");
        extractDirectory.setMaximumSize(new java.awt.Dimension(300, 20));
        extractDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractDirectoryActionPerformed(evt);
            }
        });

        extractBtn.setText("Extract");
        extractBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("TWS/IB Gateway log:");

        logComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Settings File:");

        settingsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsComboBoxActionPerformed(evt);
            }
        });

        jLabel7.setText("Manually select TWS/IB Gateway log file:");

        logDirectoryManual.setToolTipText("Select path to the log file for analysis");
        logDirectoryManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logDirectoryManualActionPerformed(evt);
            }
        });

        jLabel8.setText("Manually select settings file:");

        browseSettingsManual.setText("Browse");
        browseSettingsManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseSettingsManualActionPerformed(evt);
            }
        });

        browseZip.setText("Browse");
        browseZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseZipActionPerformed(evt);
            }
        });

        browseExtract.setText("Browse");
        browseExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseExtractActionPerformed(evt);
            }
        });

        twsIbgGroup.add(twsRadio);
        twsRadio.setText("TWS");
        twsRadio.setToolTipText("Select to analyze TWS log file");
        twsRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twsRadioActionPerformed(evt);
            }
        });

        twsIbgGroup.add(ibgRadio);
        ibgRadio.setText("IB Gateway");
        ibgRadio.setToolTipText("Select to analyze IB Gateway log file");
        ibgRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ibgRadioActionPerformed(evt);
            }
        });

        extractProgressBar.setForeground(new java.awt.Color(153, 153, 153));
        extractProgressBar.setStringPainted(true);

        jLabel10.setText("Extraction Progress:");

        browseLogManual.setText("Browse");
        browseLogManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseLogManualActionPerformed(evt);
            }
        });

        settingsDirectoryManual.setToolTipText("Select path to the settings file for analysis");

        jLabel1.setText("Trade File:");

        javax.swing.GroupLayout configurePaneLayout = new javax.swing.GroupLayout(configurePane);
        configurePane.setLayout(configurePaneLayout);
        configurePaneLayout.setHorizontalGroup(
            configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePaneLayout.createSequentialGroup()
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(configurePaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(configurePaneLayout.createSequentialGroup()
                                .addComponent(settingsDirectoryManual, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseSettingsManual))
                            .addGroup(configurePaneLayout.createSequentialGroup()
                                .addComponent(extractDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseExtract)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(extractBtn))
                            .addGroup(configurePaneLayout.createSequentialGroup()
                                .addComponent(logDirectoryManual, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseLogManual))
                            .addGroup(configurePaneLayout.createSequentialGroup()
                                .addComponent(loadDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseZip))))
                    .addGroup(configurePaneLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addGroup(configurePaneLayout.createSequentialGroup()
                                .addComponent(twsRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ibgRadio))
                            .addGroup(configurePaneLayout.createSequentialGroup()
                                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(logComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(100, 100, 100)
                                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(settingsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(100, 100, 100)
                                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(tradeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(extractProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel2)))
                    .addGroup(configurePaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1)))
                .addContainerGap(300, Short.MAX_VALUE))
        );

        configurePaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {browseExtract, browseSettingsManual});

        configurePaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {extractDirectory, loadDirectory, logDirectoryManual, settingsDirectoryManual});

        configurePaneLayout.setVerticalGroup(
            configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseZip))
                .addGap(6, 6, 6)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(extractDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseExtract)
                    .addComponent(extractBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extractProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(twsRadio)
                    .addComponent(ibgRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tradeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logDirectoryManual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseLogManual))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(settingsDirectoryManual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseSettingsManual))
                .addContainerGap(94, Short.MAX_VALUE))
        );

        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        extractManualGroup.add(useExtractFileBtn);
        useExtractFileBtn.setSelected(true);
        useExtractFileBtn.setText("Use extracted files");
        useExtractFileBtn.setToolTipText("Choose to analyze files from extracted diagnostic zip");
        useExtractFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useExtractFileBtnActionPerformed(evt);
            }
        });

        extractManualGroup.add(useManualFileBtn);
        useManualFileBtn.setText("Use manually imported files");
        useManualFileBtn.setToolTipText("Choose to analyze files imported manually");
        useManualFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useManualFileBtnActionPerformed(evt);
            }
        });

        statusLabel.setText("Status:");

        logFileStatus.setText("Log File");

        settingsFileStatus.setText("Settings File");

        analyzeBtn.setText("Analyze");
        analyzeBtn.setEnabled(false);
        analyzeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeBtnActionPerformed(evt);
            }
        });

        tradeFileStatus.setText("Trade File");

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(analyzeBtn)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(useExtractFileBtn)
                    .addComponent(useManualFileBtn)
                    .addComponent(statusLabel)
                    .addComponent(logFileStatus)
                    .addComponent(settingsFileStatus)
                    .addComponent(tradeFileStatus))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useExtractFileBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useManualFileBtn)
                .addGap(18, 18, 18)
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logFileStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsFileStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tradeFileStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyzeBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout configurePanelLayout = new javax.swing.GroupLayout(configurePanel);
        configurePanel.setLayout(configurePanelLayout);
        configurePanelLayout.setHorizontalGroup(
            configurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configurePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        configurePanelLayout.setVerticalGroup(
            configurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(configurePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        MainPane.addTab("Configure", null, configurePanel, "Configure log file locations");

        analyzeAllBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeAllBtn.setText("All");
        analyzeAllBtn.setToolTipText("Analyze all topics");
        analyzeAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeAllBtnActionPerformed(evt);
            }
        });

        analyzeEnvBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeEnvBtn.setForeground(new java.awt.Color(0, 102, 0));
        analyzeEnvBtn.setText("Env");
        analyzeEnvBtn.setToolTipText("Environmental elements");
        analyzeEnvBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeEnvBtnActionPerformed(evt);
            }
        });

        analyzeLoginSeqBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeLoginSeqBtn.setForeground(new java.awt.Color(153, 0, 0));
        analyzeLoginSeqBtn.setText("Login Seq");
        analyzeLoginSeqBtn.setToolTipText("Login sequence");
        analyzeLoginSeqBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeLoginSeqBtnActionPerformed(evt);
            }
        });

        analyzeSysResBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeSysResBtn.setForeground(new java.awt.Color(51, 102, 255));
        analyzeSysResBtn.setText("SysRes");
        analyzeSysResBtn.setToolTipText("System restart");
        analyzeSysResBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeSysResBtnActionPerformed(evt);
            }
        });

        analyzeMktDataBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeMktDataBtn.setForeground(new java.awt.Color(255, 102, 0));
        analyzeMktDataBtn.setText("Market Data");
        analyzeMktDataBtn.setToolTipText("Market Data (To see the market data routing, use Regexp search: farm)");
        analyzeMktDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeMktDataBtnActionPerformed(evt);
            }
        });

        analyzeConnBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeConnBtn.setForeground(new java.awt.Color(255, 0, 0));
        analyzeConnBtn.setText("Conn");
        analyzeConnBtn.setToolTipText("Connectivity (Works only for TWS 928 or later. For earlier versions, user the Regexp search: status [1-9]$)");
        analyzeConnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeConnBtnActionPerformed(evt);
            }
        });

        analyzeHtbpBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeHtbpBtn.setForeground(new java.awt.Color(255, 102, 153));
        analyzeHtbpBtn.setText("Htbp");
        analyzeHtbpBtn.setToolTipText("Hot Backup Lines");
        analyzeHtbpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeHtbpBtnActionPerformed(evt);
            }
        });

        analyzeAPIBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeAPIBtn.setForeground(new java.awt.Color(153, 51, 255));
        analyzeAPIBtn.setText("API");
        analyzeAPIBtn.setToolTipText("API (Detailed logging)");
        analyzeAPIBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeAPIBtnActionPerformed(evt);
            }
        });

        analyzeOrdTrdBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeOrdTrdBtn.setForeground(new java.awt.Color(0, 204, 204));
        analyzeOrdTrdBtn.setText("Orders & Trades");
        analyzeOrdTrdBtn.setToolTipText("Orders & Trades");
        analyzeOrdTrdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeOrdTrdBtnActionPerformed(evt);
            }
        });

        clearAllBtn.setText("Cls All");
        clearAllBtn.setToolTipText("Clear all display pane");
        clearAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllBtnActionPerformed(evt);
            }
        });

        autoClsCheck.setSelected(true);
        autoClsCheck.setText("Auto Cls");
        autoClsCheck.setToolTipText("Automatic clear all display panes after extraction of diagnostic file");
        autoClsCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoClsCheckActionPerformed(evt);
            }
        });

        deepAnalysisCheck.setSelected(true);
        deepAnalysisCheck.setText("Deep Analysis");
        deepAnalysisCheck.setToolTipText("Select to run a deep analysis of the log file");
        deepAnalysisCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deepAnalysisCheckActionPerformed(evt);
            }
        });

        includeXmlCheck.setSelected(true);
        includeXmlCheck.setText("Include Tws.xml in analysis");
        includeXmlCheck.setToolTipText("Select to include settings xml file analysis");
        includeXmlCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeXmlCheckActionPerformed(evt);
            }
        });

        includeTrdFileCheck.setText("Include .Trd files in analysis");
        includeTrdFileCheck.setToolTipText("Select to include day.trd file analysis");
        includeTrdFileCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeTrdFileCheckActionPerformed(evt);
            }
        });

        openLogFileBtn.setText("Open Log File");
        openLogFileBtn.setToolTipText("Open the selected log file with the default Text Editor on your computer");
        openLogFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openLogFileBtnActionPerformed(evt);
            }
        });

        regExText.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        regExText.setForeground(new java.awt.Color(102, 102, 102));
        regExText.setText("RegEx Search...");
        regExText.setToolTipText("Search in the entire logfile and could take long. Be sure to respect regexp syntax as per https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html");

        matchCaseCheck.setText("Match Case");

        regExSearchBtn.setText("Search");
        regExSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regExSearchBtnActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("Open Screenshot");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(autoClsCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deepAnalysisCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(includeXmlCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(includeTrdFileCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(openLogFileBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(analyzeAllBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeEnvBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeLoginSeqBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeSysResBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeMktDataBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeConnBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeHtbpBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeAPIBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeOrdTrdBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearAllBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(matchCaseCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(regExSearchBtn))
                    .addComponent(regExText, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(analyzeAllBtn)
                    .addComponent(analyzeEnvBtn)
                    .addComponent(analyzeLoginSeqBtn)
                    .addComponent(analyzeSysResBtn)
                    .addComponent(analyzeMktDataBtn)
                    .addComponent(analyzeConnBtn)
                    .addComponent(analyzeHtbpBtn)
                    .addComponent(analyzeAPIBtn)
                    .addComponent(analyzeOrdTrdBtn)
                    .addComponent(clearAllBtn)
                    .addComponent(regExText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoClsCheck)
                    .addComponent(deepAnalysisCheck)
                    .addComponent(includeXmlCheck)
                    .addComponent(includeTrdFileCheck)
                    .addComponent(openLogFileBtn)
                    .addComponent(matchCaseCheck)
                    .addComponent(regExSearchBtn)
                    .addComponent(jButton1)))
        );

        javax.swing.GroupLayout textMainPaneLayout = new javax.swing.GroupLayout(textMainPane);
        textMainPane.setLayout(textMainPaneLayout);
        textMainPaneLayout.setHorizontalGroup(
            textMainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1170, Short.MAX_VALUE)
        );
        textMainPaneLayout.setVerticalGroup(
            textMainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 403, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout twsLogFilterPanelLayout = new javax.swing.GroupLayout(twsLogFilterPanel);
        twsLogFilterPanel.setLayout(twsLogFilterPanelLayout);
        twsLogFilterPanelLayout.setHorizontalGroup(
            twsLogFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(textMainPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        twsLogFilterPanelLayout.setVerticalGroup(
            twsLogFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(twsLogFilterPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textMainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        MainPane.addTab("TWS Log Filter", twsLogFilterPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1175, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPane, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void customInitTextPaneComponents(){
        // Initialize display panels
        logDisplayPane1 = new javax.swing.JPanel();
        logDisplayPane2 = new javax.swing.JPanel();
        logDisplayPane3 = new javax.swing.JPanel();
        
        //logDisplayPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        logDisplayPane1.setPreferredSize(new java.awt.Dimension(textMainPane.getSize().width, (int)((textMainPane.getSize().height-50)*0.4)));
        
        //logDisplayPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        logDisplayPane2.setPreferredSize(new java.awt.Dimension(textMainPane.getSize().width, (int)((textMainPane.getSize().height-50)*0.35)));
        
        //logDisplayPane3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        logDisplayPane3.setPreferredSize(new java.awt.Dimension(textMainPane.getSize().width, (int)((textMainPane.getSize().height-50)*0.25)));
        
        // ENV, CONN and LOGIN SEQ
        envTextPane = new javax.swing.JTextPane();
        envTextPane.setName("Environmental");
        envTextPane.setEditable(false);
        
        envTextScrollPane = new javax.swing.JScrollPane(envTextPane);
        envTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        envTextScrollPane.setViewportView(envTextPane);
        envTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 0), 2, true), "Environmental", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 0)));
        
        loginSeqTextPane = new javax.swing.JTextPane();
        loginSeqTextPane.setName("Login Sequence");
        loginSeqTextPane.setEditable(false);
        
        loginSeqTextScrollPane = new javax.swing.JScrollPane(loginSeqTextPane);
        loginSeqTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        loginSeqTextScrollPane.setViewportView(loginSeqTextPane);
        loginSeqTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 0, 0), 2, true), "Login Sequence", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(153, 0, 0)));
        
        
        connTextPane = new javax.swing.JTextPane();
        connTextPane.setName("Connectivity");
        connTextPane.setEditable(false);
        
        connTextScrollPane = new javax.swing.JScrollPane(connTextPane);
        connTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        connTextScrollPane.setViewportView(connTextPane);
        connTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 2, true), "Connectivity", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 0)));
        
        envTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane1.getPreferredSize().width*0.5), (int)(logDisplayPane1.getPreferredSize().height*0.45)));
        loginSeqTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane1.getPreferredSize().width*0.5), (int)(logDisplayPane1.getPreferredSize().height*0.55)));
        connTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane1.getPreferredSize().width*0.5), (int)(logDisplayPane1.getPreferredSize().height)));
        
        envTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(envTextPane, envTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        loginSeqTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(loginSeqTextPane, loginSeqTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        connTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(connTextPane, connTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        javax.swing.GroupLayout logDisplayPane1Layout = new javax.swing.GroupLayout(logDisplayPane1);
        logDisplayPane1.setLayout(logDisplayPane1Layout);
        
        logDisplayPane1Layout.setAutoCreateGaps(true);
        
        logDisplayPane1Layout.setHorizontalGroup(
                logDisplayPane1Layout.createSequentialGroup()
                        .addGroup(logDisplayPane1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(envTextScrollPane)
                                .addComponent(loginSeqTextScrollPane))
                        .addComponent(connTextScrollPane)
        );
        
        logDisplayPane1Layout.setVerticalGroup(
                logDisplayPane1Layout.createParallelGroup()
                        .addGroup(logDisplayPane1Layout.createSequentialGroup()
                                .addComponent(envTextScrollPane)
                                .addComponent(loginSeqTextScrollPane))
                        .addComponent(connTextScrollPane)
        );
        
        // Sysres, Htbp and API
        sysResTextPane = new javax.swing.JTextPane();
        sysResTextPane.setName("System Reset");
        sysResTextPane.setEditable(false);
        
        sysResTextScrollPane = new javax.swing.JScrollPane(sysResTextPane);
        sysResTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        sysResTextScrollPane.setViewportView(sysResTextPane);
        sysResTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 102, 255), 2, true), "System Reset", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 102, 255)));
        
        htbpTextPane = new javax.swing.JTextPane();
        htbpTextPane.setName("Hot Backup Lines");
        htbpTextPane.setEditable(false);
        
        htbpTextScrollPane = new javax.swing.JScrollPane(htbpTextPane);
        htbpTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        htbpTextScrollPane.setViewportView(htbpTextPane);
        htbpTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 153), 2, true), "Hot Backup Lines", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 102, 153)));
        
        apiTextPane = new javax.swing.JTextPane();
        apiTextPane.setName("API");
        apiTextPane.setEditable(false);
        
        apiTextScrollPane = new javax.swing.JScrollPane(apiTextPane);
        apiTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        apiTextScrollPane.setViewportView(apiTextPane);
        apiTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 51, 255), 2, true), "API", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(153, 51, 255)));
        
        sysResTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane2.getPreferredSize().width*0.5), (int)(logDisplayPane2.getPreferredSize().height)));
        htbpTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane2.getPreferredSize().width*0.5), (int)(logDisplayPane2.getPreferredSize().height*0.4)));
        apiTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane2.getPreferredSize().width*0.5), (int)(logDisplayPane2.getPreferredSize().height*0.6)));
        
        sysResTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(sysResTextPane, sysResTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        htbpTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(htbpTextPane, htbpTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        apiTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(apiTextPane, apiTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        javax.swing.GroupLayout logDisplayPane2Layout = new javax.swing.GroupLayout(logDisplayPane2);
        logDisplayPane2.setLayout(logDisplayPane2Layout);
        
        logDisplayPane2Layout.setAutoCreateGaps(true);
        
        logDisplayPane2Layout.setHorizontalGroup(
                logDisplayPane2Layout.createSequentialGroup()
                        .addComponent(sysResTextScrollPane)
                        .addGroup(logDisplayPane2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(htbpTextScrollPane)
                                .addComponent(apiTextScrollPane))
        );
        
        logDisplayPane2Layout.setVerticalGroup(
                logDisplayPane2Layout.createParallelGroup()
                        .addComponent(sysResTextScrollPane)
                        .addGroup(logDisplayPane2Layout.createSequentialGroup()
                                .addComponent(htbpTextScrollPane)
                                .addComponent(apiTextScrollPane))
        );
        
        
        // Market Data and Orders & Trades
        mktDataTextPane = new javax.swing.JTextPane();
        mktDataTextPane.setName("Market Data");
        mktDataTextPane.setEditable(false);
        
        mktDataTextScrollPane = new javax.swing.JScrollPane(mktDataTextPane);
        mktDataTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        mktDataTextScrollPane.setViewportView(mktDataTextPane);
        mktDataTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 2, true), "Market Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 102, 0)));
        
        
        ordTrdTextPane = new javax.swing.JTextPane();
        ordTrdTextPane.setName("Orders & Trades");
        ordTrdTextPane.setEditable(false);
        
        ordTrdTextScrollPane = new javax.swing.JScrollPane(ordTrdTextPane);
        ordTrdTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        ordTrdTextScrollPane.setViewportView(ordTrdTextPane);
        ordTrdTextScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 204), 2, true), "Orders & Trades", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 204, 204)));
        
        
        mktDataTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane3.getPreferredSize().width*0.5), (int)(logDisplayPane3.getPreferredSize().height)));
        ordTrdTextScrollPane.setPreferredSize(new java.awt.Dimension((int)(logDisplayPane3.getPreferredSize().width*0.5), (int)(logDisplayPane3.getPreferredSize().height)));
        
        mktDataTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(mktDataTextPane, mktDataTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        ordTrdTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                if(evt.getClickCount() == 2){
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(ordTrdTextPane, ordTrdTextScrollPane);
                            magnifiedDisplayPane.setVisible(true);
                        }
                    });
                }
            }
        });
        
        javax.swing.GroupLayout logDisplayPane3Layout = new javax.swing.GroupLayout(logDisplayPane3);
        logDisplayPane3.setLayout(logDisplayPane3Layout);
        
        logDisplayPane3Layout.setAutoCreateGaps(true);
        
        logDisplayPane3Layout.setHorizontalGroup(
                logDisplayPane3Layout.createSequentialGroup()
                        .addComponent(mktDataTextScrollPane)
                        .addComponent(ordTrdTextScrollPane)
        );
        
        logDisplayPane3Layout.setVerticalGroup(
                logDisplayPane3Layout.createParallelGroup()
                        .addComponent(mktDataTextScrollPane)
                        .addComponent(ordTrdTextScrollPane)
        );
        
        // Add log display panes to main text pane
        textMainPane.removeAll();
        javax.swing.GroupLayout textMainPaneLayout = new javax.swing.GroupLayout(textMainPane);
        textMainPane.setLayout(textMainPaneLayout);
        textMainPaneLayout.setHorizontalGroup(
                textMainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(logDisplayPane1, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logDisplayPane2, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logDisplayPane3, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        textMainPaneLayout.setVerticalGroup(
                textMainPaneLayout.createSequentialGroup()
                        .addComponent(logDisplayPane1, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logDisplayPane2, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logDisplayPane3, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }
    
    private void useExtractFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useExtractFileBtnActionPerformed
        // Log section
        if(logComboBox.getSelectedItem() != null){
            manager.selectLogFile(logComboBox.getSelectedItem().toString(), false);
            // Set Status
            logReady = true;
            updateStatus();
        } else {
            manager.selectLogFile(null, false);
            // Set Status
            logReady = false;
            updateStatus();
        }
        
        // Settings section
        if(settingsComboBox.getSelectedItem() != null){
            manager.selectSettingsFile(settingsComboBox.getSelectedItem().toString(), false);
            // Set Status
            settingsReady = true;
            updateStatus();
        } else {
            manager.selectSettingsFile(null, false);
            // Set Status
            settingsReady = false;
            updateStatus();
        }
    }//GEN-LAST:event_useExtractFileBtnActionPerformed
    
    private void useManualFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useManualFileBtnActionPerformed
        // TODO add your handling code here:
        // Log section
        if(!logDirectoryManual.getText().isEmpty()){
            manager.selectLogFile(logDirectoryManual.getText(), true);
            // Set Status
            logReady = true;
            updateStatus();
        } else {
            manager.selectLogFile(null, true);
            logReady = false;
            updateStatus();
        }
        
        // Settings section
        if(!settingsDirectoryManual.getText().isEmpty()){
            manager.selectSettingsFile(settingsDirectoryManual.getText(), true);
            // Set Status
            settingsReady = true;
            updateStatus();
        } else {
            manager.selectSettingsFile(null, true);
            settingsReady = false;
            updateStatus();
        }
    }//GEN-LAST:event_useManualFileBtnActionPerformed
    
    private void analyzeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeBtnActionPerformed
        // TODO add your handling code here:
        MainPane.setSelectedComponent(twsLogFilterPanel);
    }//GEN-LAST:event_analyzeBtnActionPerformed
    
    private void analyzeEnvBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeEnvBtnActionPerformed
        // TODO add your handling code here:
        if(logReady == true){
            manager.startParse(Choices.ENV, useManualFileBtn.isSelected(), textPaneList);
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_analyzeEnvBtnActionPerformed
    
    private void deepAnalysisCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deepAnalysisCheckActionPerformed
        // TODO add your handling code here:
        if(deepAnalysisCheck.isSelected()){
            manager.setDeepDiagnostic(true);
        } else {
            manager.setDeepDiagnostic(false);
        }
    }//GEN-LAST:event_deepAnalysisCheckActionPerformed
    
    private void browseLogManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseLogManualActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            logDirectoryManual.setText(fileChooser.getSelectedFile().getAbsolutePath());
            if(useManualFileBtn.isSelected()){
                manager.selectLogFile(logDirectoryManual.getText(), true);
                logReady = true;
                updateStatus();
            }
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find file.");
        }
    }//GEN-LAST:event_browseLogManualActionPerformed
    
    private void ibgRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ibgRadioActionPerformed
        
        manager.setIsTws(false);
        
        // Populate and select log file for combo box
        handleLogComboBox_ibg();
        
        // Populate and select settings file for combo box
        handleSettingsComboBox_ibg();
    }//GEN-LAST:event_ibgRadioActionPerformed
    
    private void twsRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twsRadioActionPerformed
        
        manager.setIsTws(true);
        
        // Populate and select log file for combo box
        handleLogComboBox_tws();
        
        // Populate and select settings file for combo box
        handleSettingsComboBox_tws();
        
        // Populate and select trade file for combo box
        handleTradeComboBox();
    }//GEN-LAST:event_twsRadioActionPerformed
    
    private void browseExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseExtractActionPerformed
        // TODO add your handling code here:
        directoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = directoryChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File directory = directoryChooser.getSelectedFile();
            extractDirectory.setText(directory.getAbsolutePath());
            manager.setReaderLocation(null, extractDirectory.getText());
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find directory.");
        }
    }//GEN-LAST:event_browseExtractActionPerformed
    
    private void browseZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseZipActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            diagnosticFile = fileChooser.getSelectedFile();
            loadDirectory.setText(diagnosticFile.getAbsolutePath());
            extractDirectory.setText(diagnosticFile.getAbsolutePath() + "_extracted");
            manager.setReaderLocation(loadDirectory.getText(), extractDirectory.getText());
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find file.");
        }
    }//GEN-LAST:event_browseZipActionPerformed
    
    private void browseSettingsManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseSettingsManualActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            settingsDirectoryManual.setText(fileChooser.getSelectedFile().getAbsolutePath());
            if(useManualFileBtn.isSelected()){
                manager.selectSettingsFile(settingsDirectoryManual.getText(), true);
                settingsReady = true;
                updateStatus();
            }
        } else if (returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to find file.");
        }
    }//GEN-LAST:event_browseSettingsManualActionPerformed
    
    private void logDirectoryManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logDirectoryManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_logDirectoryManualActionPerformed
    
    private void settingsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsComboBoxActionPerformed
        // TODO add your handling code here:
        if(settingsComboBox.getSelectedItem() != null){
            manager.selectSettingsFile(settingsComboBox.getSelectedItem().toString(), false);
            
            // Set Status
            if(useExtractFileBtn.isSelected()){
                settingsReady = true;
                updateStatus();
            }
        }
    }//GEN-LAST:event_settingsComboBoxActionPerformed
    
    private void logComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logComboBoxActionPerformed
        // TODO add your handling code here:
        if(logComboBox.getSelectedItem() != null){
            manager.selectLogFile(logComboBox.getSelectedItem().toString(), false);
            
            // Set Status
            if(useExtractFileBtn.isSelected()){
                logReady = true;
                updateStatus();
            }
        }
    }//GEN-LAST:event_logComboBoxActionPerformed
    
    private void extractBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractBtnActionPerformed
        // TODO add your handling code here:
        File directory = new File(extractDirectory.getText());
        if(directory.isDirectory()){
            int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The directory already exists. Do you want to clear the " + extractDirectory.getText() + " folder first?");
            if(reply == javax.swing.JOptionPane.YES_OPTION){
                try{
                    FileUtils.cleanDirectory(directory); // Clear extract directory
                    extractProgressBar.setValue(20); /*Progress bar setting*/
                } catch (IOException e){
                    e.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(null, "Failed to clear directory");
                    extractProgressBar.setValue(0); /*Progress bar setting*/
                }
                
                extractDirectory.setText(directory.toString());
                manager.setReaderLocation(null, extractDirectory.getText());
                // Initialize tws/ibg log combo box
                logComboBox.setSelectedItem(null);
                logComboBox.removeAllItems();
                isTwsLogAdded = false;
                isIbgLogAdded = false;
                
                // Iniatialize settings combo box
                settingsComboBox.setSelectedItem(null);
                settingsComboBox.removeAllItems();
                isTwsSettingsAdded = false;
                isIbgSettingsAdded = false;
                
                // Initialize trade combo box
                tradeComboBox.setSelectedItem(null);
                tradeComboBox.removeAllItems();
                isTradeFileAdded = false;
                
                manager.resetAllFileList();
                extractProgressBar.setValue(30); /*Progress bar setting*/
                
                manager.extract();
                isExtracted = true;
                extractProgressBar.setValue(70); /*Progress bar setting*/
                
                if(twsRadio.isSelected()){
                    // Populate and select log file for combo box
                    handleLogComboBox_tws();
                    
                    // Populate and select settings file for combo box
                    handleSettingsComboBox_tws();
                    
                    // Populate and select trade file for combo box
                    handleTradeComboBox();
                } else if(ibgRadio.isSelected()){
                    // Populate and select log file for combo box
                    handleLogComboBox_ibg();
                    
                    // Populate and select settings file for combo box
                    handleSettingsComboBox_ibg();
                }
                extractProgressBar.setValue(90); /*Progress bar setting*/
                
                if(autoClsCheck.isSelected()){
                    textPaneList.get(Choices.ENV).setText(null);
                    textPaneList.get(Choices.LOGINSEQ).setText(null);
                    textPaneList.get(Choices.CONN).setText(null);
                    textPaneList.get(Choices.SYSRES).setText(null);
                    textPaneList.get(Choices.HTBP).setText(null);
                    textPaneList.get(Choices.API).setText(null);
                    textPaneList.get(Choices.MKTDATA).setText(null);
                    textPaneList.get(Choices.ORDERSTRDS).setText(null);
                }
                extractProgressBar.setValue(100); /*Progress bar setting*/
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Please choose a valid directory");
                extractDirectory.setText(System.getProperty("user.home").toString() + "\\Temp");
                extractProgressBar.setValue(0); /*Progress bar setting*/
            }
        }
        else {
            int reply = javax.swing.JOptionPane.showConfirmDialog(null, "The directory " + extractDirectory.getText() + " does not exist. Do you want to create it?");
            if(reply == javax.swing.JOptionPane.YES_OPTION){
                directory.mkdir();
                extractDirectory.setText(directory.toString());
                manager.setReaderLocation(null, extractDirectory.getText());
                extractProgressBar.setValue(20); /*Progress bar setting*/
                // Initialize tws/ibg log combo box
                logComboBox.setSelectedItem(null);
                logComboBox.removeAllItems();
                isTwsLogAdded = false; // initialize
                isIbgLogAdded = false;
                
                // Initialize settings file combo box
                settingsComboBox.setSelectedItem(null);
                settingsComboBox.removeAllItems();
                isTwsSettingsAdded = false;
                isIbgSettingsAdded = false;
                
                // Initialize trade combo box
                tradeComboBox.setSelectedItem(null);
                isTradeFileAdded = false;
                
                manager.resetAllFileList();
                extractProgressBar.setValue(30); /*Progress bar setting*/
                
                manager.extract();
                isExtracted = true;
                extractProgressBar.setValue(70); /*Progress bar setting*/
                
                if(twsRadio.isSelected()){
                    // Populate and select log file for combo box
                    handleLogComboBox_tws();
                    
                    // Populate and select settings file for combo box
                    handleSettingsComboBox_tws();
                    
                    // Populate and select trade file for combo box
                    handleTradeComboBox();
                } else if(ibgRadio.isSelected()){
                    // Populate and select log file for combo box
                    handleLogComboBox_ibg();
                    
                    // Populate and select settings file for combo box
                    handleSettingsComboBox_ibg();
                }
                extractProgressBar.setValue(90); /*Progress bar setting*/
                
                if(autoClsCheck.isSelected()){
                    textPaneList.get(Choices.ENV).setText(null);
                    textPaneList.get(Choices.LOGINSEQ).setText(null);
                    textPaneList.get(Choices.CONN).setText(null);
                    textPaneList.get(Choices.SYSRES).setText(null);
                    textPaneList.get(Choices.HTBP).setText(null);
                    textPaneList.get(Choices.API).setText(null);
                    textPaneList.get(Choices.MKTDATA).setText(null);
                    textPaneList.get(Choices.ORDERSTRDS).setText(null);
                }
                extractProgressBar.setValue(100); /*Progress bar setting*/
            }
            else {
                javax.swing.JOptionPane.showMessageDialog(null, "Failed to load directory. Please find a different directory.");
                extractDirectory.setText(System.getProperty("user.home").toString() + "\\Temp");
                extractProgressBar.setValue(0); /*Progress bar setting*/
            }
        }
    }//GEN-LAST:event_extractBtnActionPerformed
    
    private void extractDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractDirectoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_extractDirectoryActionPerformed
    
    private void loadDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDirectoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loadDirectoryActionPerformed
    
    private void analyzeLoginSeqBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeLoginSeqBtnActionPerformed
        // TODO add your handling code here:
        if(logReady == true){
            manager.startParse(Choices.LOGINSEQ, useManualFileBtn.isSelected(), textPaneList);
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_analyzeLoginSeqBtnActionPerformed
    
    private void analyzeConnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeConnBtnActionPerformed
        // TODO add your handling code here:
        if(logReady == true){
            manager.startParse(Choices.CONN, useManualFileBtn.isSelected(), textPaneList);
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_analyzeConnBtnActionPerformed
    
    private void analyzeSysResBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeSysResBtnActionPerformed
        // TODO add your handling code here:
        if(logReady == true){
            manager.startParse(Choices.SYSRES, useManualFileBtn.isSelected(), textPaneList);
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_analyzeSysResBtnActionPerformed
    
    private void analyzeMktDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeMktDataBtnActionPerformed
        // TODO add your handling code here:
        if(logReady == true){
            manager.startParse(Choices.MKTDATA, useManualFileBtn.isSelected(), textPaneList);
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_analyzeMktDataBtnActionPerformed
    
    private void analyzeHtbpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeHtbpBtnActionPerformed
        // TODO add your handling code here:
        if(logReady == true){
            manager.startParse(Choices.HTBP, useManualFileBtn.isSelected(), textPaneList);
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_analyzeHtbpBtnActionPerformed
    
    private void analyzeAPIBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeAPIBtnActionPerformed
        // TODO add your handling code here:
        if(logReady == true){
            manager.startParse(Choices.API, useManualFileBtn.isSelected(), textPaneList);
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_analyzeAPIBtnActionPerformed
    
    private void analyzeOrdTrdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeOrdTrdBtnActionPerformed
        // TODO add your handling code here:
        if(logReady == true){
            manager.startParse(Choices.ORDERSTRDS, useManualFileBtn.isSelected(), textPaneList);
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_analyzeOrdTrdBtnActionPerformed
    
    private void analyzeAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeAllBtnActionPerformed
        // TODO add your handling code here:
        if(logReady == true){
            manager.startParse(Choices.ENV, useManualFileBtn.isSelected(), textPaneList);
            manager.startParse(Choices.LOGINSEQ, useManualFileBtn.isSelected(), textPaneList);
            manager.startParse(Choices.CONN, useManualFileBtn.isSelected(), textPaneList);
            manager.startParse(Choices.SYSRES, useManualFileBtn.isSelected(), textPaneList);
            manager.startParse(Choices.HTBP, useManualFileBtn.isSelected(), textPaneList);
            manager.startParse(Choices.API, useManualFileBtn.isSelected(), textPaneList);
            manager.startParse(Choices.MKTDATA, useManualFileBtn.isSelected(), textPaneList);
            manager.startParse(Choices.ORDERSTRDS, useManualFileBtn.isSelected(), textPaneList);
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_analyzeAllBtnActionPerformed
    
    private void clearAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllBtnActionPerformed
        // TODO add your handling code here:
        textPaneList.get(Choices.ENV).setText(null);
        textPaneList.get(Choices.LOGINSEQ).setText(null);
        textPaneList.get(Choices.CONN).setText(null);
        textPaneList.get(Choices.SYSRES).setText(null);
        textPaneList.get(Choices.HTBP).setText(null);
        textPaneList.get(Choices.API).setText(null);
        textPaneList.get(Choices.MKTDATA).setText(null);
        textPaneList.get(Choices.ORDERSTRDS).setText(null);
    }//GEN-LAST:event_clearAllBtnActionPerformed

    private void includeXmlCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeXmlCheckActionPerformed
        // TODO add your handling code here:
        if(includeXmlCheck.isSelected()){
            manager.setIncludeXml(true);
        } else {
            manager.setIncludeXml(false);
        }
    }//GEN-LAST:event_includeXmlCheckActionPerformed

    private void includeTrdFileCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeTrdFileCheckActionPerformed
        // TODO add your handling code here:
        if(includeTrdFileCheck.isSelected()){
            manager.setIncludeTrd(true);
        } else {
            manager.setIncludeTrd(false);
        }
    }//GEN-LAST:event_includeTrdFileCheckActionPerformed

    private void autoClsCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoClsCheckActionPerformed
        // TODO add your handling code here:
        if(autoClsCheck.isSelected()){
            manager.setAutoCls(true);
        } else {
            manager.setAutoCls(false);
        }
    }//GEN-LAST:event_autoClsCheckActionPerformed

    private void openLogFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openLogFileBtnActionPerformed
        // TODO add your handling code here:
        if(logReady == true){
            manager.openLogFileInNotePad(useManualFileBtn.isSelected());
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_openLogFileBtnActionPerformed

    private void regExSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regExSearchBtnActionPerformed
        // TODO add your handling code here:
        if(logReady == true) {
            
            if(!regExText.getText().isEmpty()){
            
            javax.swing.JTextPane regExTextPane = new javax.swing.JTextPane();
            regExTextPane.setName("Regular Expression Search");
            regExTextPane.setEditable(false);

            javax.swing.JScrollPane regExScrollPane = new javax.swing.JScrollPane(regExTextPane);
            regExScrollPane.setViewportView(regExTextPane);
            regExScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Regular Expression Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0)));

            manager.regExSearch(useManualFileBtn.isSelected(), regExText.getText(), matchCaseCheck.isSelected(), regExTextPane);

            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    javax.swing.JFrame magnifiedDisplayPane = new MagnifiedDisplayPane(regExTextPane, regExScrollPane);
                    magnifiedDisplayPane.setVisible(true);
                }
            });
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No log file selected");
        }
    }//GEN-LAST:event_regExSearchBtnActionPerformed
    
    private void customInitComponents(){
        // Put Window location at center
        java.awt.Dimension dim = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, 0);
        
        textPaneList.put(Choices.ENV, envTextPane);
        textPaneList.put(Choices.CONN, connTextPane);
        textPaneList.put(Choices.LOGINSEQ, loginSeqTextPane);
        textPaneList.put(Choices.SYSRES, sysResTextPane);
        textPaneList.put(Choices.HTBP, htbpTextPane);
        textPaneList.put(Choices.API, apiTextPane);
        textPaneList.put(Choices.MKTDATA, mktDataTextPane);
        textPaneList.put(Choices.ORDERSTRDS, ordTrdTextPane);
    }
    
    private void handleLogComboBox_tws(){
        if(isExtracted == true && isTwsLogAdded == false){
            String[] list = manager.getLogFileListNames();
            if(list == null){
                logComboBox.setSelectedItem(null);
                isTwsLogAdded = true;
                if(useExtractFileBtn.isSelected()){
                    manager.selectLogFile(null, false);
                    logReady = false;
                    updateStatus();
                }
                return;
            }
            
            for(String s: list){
                logComboBox.addItem(s);
            }
            isTwsLogAdded = true;
        }
        logComboBox.setSelectedItem(manager.getTodayLogFileName());
        if(logComboBox.getSelectedItem() != null && useExtractFileBtn.isSelected()){
            manager.selectLogFile(logComboBox.getSelectedItem().toString(), false);
            logReady = true;
            updateStatus();
        } else {
            logReady = false;
            updateStatus();
        }
    }
    
    private void handleSettingsComboBox_tws(){
        if(isExtracted == true && isTwsSettingsAdded == false){
            String[] list = manager.getSettingsFileListNames();
            if(list == null){
                settingsComboBox.setSelectedItem(null);
                isTwsSettingsAdded = true;
                if(useExtractFileBtn.isSelected()){
                    manager.selectSettingsFile(null, false);
                    settingsReady = false;
                    updateStatus();
                }
                return;
            }
            
            for(String s: list){
                settingsComboBox.addItem(s);
            }
            isTwsSettingsAdded = true;
        }
        settingsComboBox.setSelectedItem(manager.getTodaySettingsFileName());
        if(settingsComboBox.getSelectedItem() != null && useExtractFileBtn.isSelected()){
            manager.selectSettingsFile(settingsComboBox.getSelectedItem().toString(), false);
            settingsReady = true;
            updateStatus();
        } else {
            settingsReady = false;
            updateStatus();
        }
    }
    
    private void handleLogComboBox_ibg(){
        if(isExtracted == true && isIbgLogAdded == false){
            String[] list = manager.getLogFileListNames();
            if(list == null){
                logComboBox.setSelectedItem(null);
                isIbgLogAdded = true;
                if(useExtractFileBtn.isSelected()){
                    manager.selectLogFile(null, false);
                    logReady = false;
                    updateStatus();
                }
                return;
            }
            
            for(String s: list){
                logComboBox.addItem(s);
            }
            isIbgLogAdded = true;
        }
        logComboBox.setSelectedItem(manager.getTodayLogFileName());
        if(logComboBox.getSelectedItem() != null && useExtractFileBtn.isSelected()){
            manager.selectLogFile(logComboBox.getSelectedItem().toString(), false);
            logReady = true;
            updateStatus();
        } else {
            logReady = false;
            updateStatus();
        }
    }
    
    private void handleSettingsComboBox_ibg(){
        if(isExtracted == true && isIbgSettingsAdded == false){
            String[] list = manager.getSettingsFileListNames();
            if(list == null){
                settingsComboBox.setSelectedItem(null);
                isIbgSettingsAdded = true;
                if(useExtractFileBtn.isSelected()){
                    manager.selectSettingsFile(null, false);
                    settingsReady = false;
                    updateStatus();
                }
                return;
            }
            
            for(String s: list){
                settingsComboBox.addItem(s);
            }
            isIbgSettingsAdded = true;
        }
        settingsComboBox.setSelectedItem(manager.getTodaySettingsFileName());
        if(settingsComboBox.getSelectedItem() != null && useExtractFileBtn.isSelected()){
            manager.selectSettingsFile(settingsComboBox.getSelectedItem().toString(), false);
            settingsReady = true;
            updateStatus();
        } else {
            settingsReady = false;
            updateStatus();
        }
    }
    
    private void handleTradeComboBox(){
        if(isExtracted == true && isTradeFileAdded == false){
            String[] list = manager.getTradeFileListNames();
            if(list == null){
                tradeComboBox.setSelectedItem(null);
                isTradeFileAdded = true;
                if(useExtractFileBtn.isSelected()){
                    manager.selectTradeFile(null);
                    trdReady = false;
                    updateStatus();
                }
                return;
            }
            
            for(String s: list){
                tradeComboBox.addItem(s);
            }
            isTradeFileAdded = true;
        }
        tradeComboBox.setSelectedItem(manager.getTodayTradeFileName());
        if(tradeComboBox.getSelectedItem() != null && useExtractFileBtn.isSelected()){
            manager.selectTradeFile(tradeComboBox.getSelectedItem().toString());
            trdReady = true;
            updateStatus();
        } else {
            trdReady = false;
            updateStatus();
        }
    }
    
    private void updateStatus(){
        // Update Log File status
        if(logReady == true){
            logFileStatus.setText("Log File - Ready");
            logFileStatus.setForeground(Color.GREEN);
            analyzeBtn.setEnabled(true);
        } else {
            logFileStatus.setText("Log File - Not Selected");
            logFileStatus.setForeground(Color.RED);
            analyzeBtn.setEnabled(false);
        }
        
        // Update Settings File Status
        if(settingsReady == true){
            settingsFileStatus.setText("Settings File - Ready");
            settingsFileStatus.setForeground(Color.GREEN);
            manager.setIncludeXml(true);
            includeXmlCheck.setSelected(true);
            includeXmlCheck.setEnabled(true);
        } else {
            settingsFileStatus.setText("Settings File - Not Selected");
            settingsFileStatus.setForeground(Color.RED);
            manager.setIncludeXml(false);
            includeXmlCheck.setSelected(false);
            includeXmlCheck.setEnabled(false);
        }
        
        //Update Trade File Status
        if(trdReady == true){
            tradeFileStatus.setText("Trade File - Ready");
            tradeFileStatus.setForeground(Color.GREEN);
            includeTrdFileCheck.setEnabled(true);
        } else {
            tradeFileStatus.setText("Trade File - Not Selected");
            tradeFileStatus.setForeground(Color.RED);
            includeTrdFileCheck.setEnabled(false);
        }
    }
    
    public static void addStylesToDocument(StyledDocument doc){
        Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
        
        Style regular = doc.addStyle("regular", def);
        //StyleConstants.setFontFamily(def, "SabsSerif");
        
        Style s = doc.addStyle("italic", regular);
        StyleConstants.setItalic(s, true);
        
        s = doc.addStyle("italicBold", regular);
        StyleConstants.setItalic(s, true);
        StyleConstants.setBold(s, true);
        
        s = doc.addStyle("blackBold", regular);
        StyleConstants.setBold(s, true);
        
        s = doc.addStyle("blackBoldCentered", regular);
        StyleConstants.setBold(s, true);
        StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);
        
        s = doc.addStyle("purpleBold", regular);
        StyleConstants.setForeground(s, new Color(255,0,255).darker().darker());
        StyleConstants.setBold(s, true);
        
        s = doc.addStyle("blue", regular);
        StyleConstants.setForeground(s, Color.blue.brighter().brighter());
        
        s = doc.addStyle("gray", regular);
        StyleConstants.setForeground(s, Color.gray);
        
        s = doc.addStyle("green", regular);
        StyleConstants.setForeground(s, Color.green.darker());
        
        s = doc.addStyle("darkGreen", regular);
        StyleConstants.setForeground(s, Color.green.darker().darker());
        
        s = doc.addStyle("orange", regular);
        StyleConstants.setForeground(s, Color.orange.darker());
        
        s = doc.addStyle("red", regular);
        StyleConstants.setForeground(s, Color.red);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalyzerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalyzerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalyzerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalyzerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AnalyzerGUI mainFrame = new AnalyzerGUI();
                
                mainFrame.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane MainPane;
    private javax.swing.JButton analyzeAPIBtn;
    private javax.swing.JButton analyzeAllBtn;
    private javax.swing.JButton analyzeBtn;
    private javax.swing.JButton analyzeConnBtn;
    private javax.swing.JButton analyzeEnvBtn;
    private javax.swing.JButton analyzeHtbpBtn;
    private javax.swing.JButton analyzeLoginSeqBtn;
    private javax.swing.JButton analyzeMktDataBtn;
    private javax.swing.JButton analyzeOrdTrdBtn;
    private javax.swing.JButton analyzeSysResBtn;
    private javax.swing.JCheckBox autoClsCheck;
    private javax.swing.JButton browseExtract;
    private javax.swing.JButton browseLogManual;
    private javax.swing.JButton browseSettingsManual;
    private javax.swing.JButton browseZip;
    private javax.swing.JButton clearAllBtn;
    private javax.swing.JPanel configurePane;
    private javax.swing.JPanel configurePanel;
    private javax.swing.JCheckBox deepAnalysisCheck;
    private javax.swing.JFileChooser directoryChooser;
    private javax.swing.JButton extractBtn;
    private javax.swing.JTextField extractDirectory;
    private javax.swing.ButtonGroup extractManualGroup;
    private javax.swing.JProgressBar extractProgressBar;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JRadioButton ibgRadio;
    private javax.swing.JCheckBox includeTrdFileCheck;
    private javax.swing.JCheckBox includeXmlCheck;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField loadDirectory;
    private javax.swing.JComboBox<String> logComboBox;
    private javax.swing.JTextField logDirectoryManual;
    private javax.swing.JLabel logFileStatus;
    private javax.swing.JCheckBox matchCaseCheck;
    private javax.swing.JButton openLogFileBtn;
    private javax.swing.JButton regExSearchBtn;
    private javax.swing.JTextField regExText;
    private javax.swing.JComboBox<String> settingsComboBox;
    private javax.swing.JTextField settingsDirectoryManual;
    private javax.swing.JLabel settingsFileStatus;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JPanel textMainPane;
    private javax.swing.JComboBox<String> tradeComboBox;
    private javax.swing.JLabel tradeFileStatus;
    private javax.swing.ButtonGroup twsIbgGroup;
    private javax.swing.JPanel twsLogFilterPanel;
    private javax.swing.JRadioButton twsRadio;
    private javax.swing.JRadioButton useExtractFileBtn;
    private javax.swing.JRadioButton useManualFileBtn;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JPanel logDisplayPane1;
    private javax.swing.JPanel logDisplayPane2;
    private javax.swing.JPanel logDisplayPane3;
    private javax.swing.JTextPane envTextPane;
    private javax.swing.JTextPane loginSeqTextPane;
    private javax.swing.JTextPane connTextPane;
    private javax.swing.JTextPane sysResTextPane;
    private javax.swing.JTextPane htbpTextPane;
    private javax.swing.JTextPane apiTextPane;
    private javax.swing.JTextPane mktDataTextPane;
    private javax.swing.JTextPane ordTrdTextPane;
    
    private javax.swing.JScrollPane envTextScrollPane;
    private javax.swing.JScrollPane loginSeqTextScrollPane;
    private javax.swing.JScrollPane connTextScrollPane;
    private javax.swing.JScrollPane sysResTextScrollPane;
    private javax.swing.JScrollPane htbpTextScrollPane;
    private javax.swing.JScrollPane apiTextScrollPane;
    private javax.swing.JScrollPane mktDataTextScrollPane;
    private javax.swing.JScrollPane ordTrdTextScrollPane;
}
